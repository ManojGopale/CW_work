   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32l4xx_hal_pwr_ex.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_PWREx_GetVoltageRange,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_PWREx_GetVoltageRange
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	HAL_PWREx_GetVoltageRange:
  25              	.LFB309:
  26              		.file 1 ".././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c"
   1:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
   2:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   ******************************************************************************
   3:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @file    stm32l4xx_hal_pwr_ex.c
   4:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @author  MCD Application Team
   5:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief   Extended PWR HAL module driver.
   6:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *          This file provides firmware functions to manage the following
   7:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *          functionalities of the Power Controller (PWR) peripheral:
   8:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *           + Extended Initialization and de-initialization functions
   9:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *           + Extended Peripheral Control functions
  10:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *
  11:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   ******************************************************************************
  12:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @attention
  13:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *
  14:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  15:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *
  16:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  17:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * are permitted provided that the following conditions are met:
  18:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  19:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *      this list of conditions and the following disclaimer.
  20:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  21:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
  22:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *      and/or other materials provided with the distribution.
  23:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  24:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *      may be used to endorse or promote products derived from this software
  25:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *      without specific prior written permission.
  26:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *
  27:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  28:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  29:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  30:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  31:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  32:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  33:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  34:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  35:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *
  38:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   ******************************************************************************
  39:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
  40:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
  41:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /* Includes ------------------------------------------------------------------*/
  42:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #include "stm32l4xx_hal.h"
  43:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
  44:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /** @addtogroup STM32L4xx_HAL_Driver
  45:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @{
  46:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
  47:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
  48:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /** @defgroup PWREx PWREx
  49:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief PWR Extended HAL module driver
  50:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @{
  51:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
  52:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
  53:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #ifdef HAL_PWR_MODULE_ENABLED
  54:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
  55:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /* Private typedef -----------------------------------------------------------*/
  56:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /* Private define ------------------------------------------------------------*/
  57:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
  58:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined (STM32L412xx) || defined (STM32L422xx) || defined (STM32L431xx) || defined (STM32L432xx
  59:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #define PWR_PORTH_AVAILABLE_PINS   ((uint32_t)0x0000000B) /* PH0/PH1/PH3 */
  60:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #elif defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx)
  61:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #define PWR_PORTH_AVAILABLE_PINS   ((uint32_t)0x0000000B) /* PH0/PH1/PH3 */
  62:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #elif defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485
  63:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #define PWR_PORTH_AVAILABLE_PINS   ((uint32_t)0x00000003) /* PH0/PH1 */
  64:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #elif defined (STM32L496xx) || defined (STM32L4A6xx) || defined (STM32L4R5xx) || defined (STM32L4R7
  65:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #define PWR_PORTH_AVAILABLE_PINS   ((uint32_t)0x0000FFFF) /* PH0..PH15 */
  66:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
  67:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
  68:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined (STM32L496xx) || defined (STM32L4A6xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx
  69:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #define PWR_PORTI_AVAILABLE_PINS   ((uint32_t)0x00000FFF) /* PI0..PI11 */
  70:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
  71:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
  72:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /** @defgroup PWR_Extended_Private_Defines PWR Extended Private Defines
  73:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @{
  74:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
  75:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
  76:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /** @defgroup PWREx_PVM_Mode_Mask PWR PVM Mode Mask
  77:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @{
  78:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
  79:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #define PVM_MODE_IT               ((uint32_t)0x00010000)  /*!< Mask for interruption yielded by PVM
  80:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #define PVM_MODE_EVT              ((uint32_t)0x00020000)  /*!< Mask for event yielded by PVM thresh
  81:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #define PVM_RISING_EDGE           ((uint32_t)0x00000001)  /*!< Mask for rising edge set as PVM trig
  82:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #define PVM_FALLING_EDGE          ((uint32_t)0x00000002)  /*!< Mask for falling edge set as PVM tri
  83:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
  84:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @}
  85:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
  86:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
  87:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /** @defgroup PWREx_TimeOut_Value PWR Extended Flag Setting Time Out Value
  88:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @{
  89:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
  90:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #define PWR_FLAG_SETTING_DELAY_US                      50UL   /*!< Time out value for REGLPF and VO
  91:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
  92:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @}
  93:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
  94:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
  95:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
  96:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
  97:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
  98:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @}
  99:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 100:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 101:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 102:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 103:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /* Private macro -------------------------------------------------------------*/
 104:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /* Private variables ---------------------------------------------------------*/
 105:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /* Private function prototypes -----------------------------------------------*/
 106:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /* Exported functions --------------------------------------------------------*/
 107:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 108:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions PWR Extended Exported Functions
 109:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @{
 110:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 111:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 112:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group1 Extended Peripheral Control functions
 113:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *  @brief   Extended Peripheral Control functions
 114:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *
 115:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** @verbatim
 116:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****  ===============================================================================
 117:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****               ##### Extended Peripheral Initialization and de-initialization functions #####
 118:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****  ===============================================================================
 119:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     [..]
 120:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 121:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** @endverbatim
 122:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @{
 123:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 124:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 125:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 126:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 127:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Return Voltage Scaling Range.
 128:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
 129:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
 130:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 131:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetVoltageRange(void)
 132:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
  27              		.loc 1 132 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 133:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(PWR_CR5_R1MODE)
 134:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 135:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     {
 136:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       return PWR_REGULATOR_VOLTAGE_SCALE2;
 137:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     }
 138:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 139:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     {
 140:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
 141:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       return PWR_REGULATOR_VOLTAGE_SCALE1;
 142:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     }
 143:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     else
 144:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     {
 145:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 146:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     }
 147:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #else
 148:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   return  (PWR->CR1 & PWR_CR1_VOS);
  32              		.loc 1 148 3 view .LVU1
  33              		.loc 1 148 15 is_stmt 0 view .LVU2
  34 0000 024B     		ldr	r3, .L2
  35 0002 1868     		ldr	r0, [r3]
 149:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 150:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
  36              		.loc 1 150 1 view .LVU3
  37 0004 00F4C060 		and	r0, r0, #1536
  38 0008 7047     		bx	lr
  39              	.L3:
  40 000a 00BF     		.align	2
  41              	.L2:
  42 000c 00700040 		.word	1073770496
  43              		.cfi_endproc
  44              	.LFE309:
  46              		.section	.text.HAL_PWREx_ControlVoltageScaling,"ax",%progbits
  47              		.align	1
  48              		.global	HAL_PWREx_ControlVoltageScaling
  49              		.syntax unified
  50              		.thumb
  51              		.thumb_func
  52              		.fpu softvfp
  54              	HAL_PWREx_ControlVoltageScaling:
  55              	.LVL0:
  56              	.LFB310:
 151:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 152:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 153:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 154:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 155:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Configure the main internal regulator output voltage.
 156:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @param  VoltageScaling: specifies the regulator output voltage to achieve
 157:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         a tradeoff between performance and power consumption.
 158:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 159:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   @if STM32L4S9xx
 160:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *            @arg @ref PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when available, Regulator voltage outpu
 161:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *                                                typical output voltage at 1.2 V,
 162:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *                                                system frequency up to 120 MHz.
 163:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   @endif
 164:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *            @arg @ref PWR_REGULATOR_VOLTAGE_SCALE1 Regulator voltage output range 1 mode,
 165:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *                                                typical output voltage at 1.2 V,
 166:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *                                                system frequency up to 80 MHz.
 167:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *            @arg @ref PWR_REGULATOR_VOLTAGE_SCALE2 Regulator voltage output range 2 mode,
 168:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *                                                typical output voltage at 1.0 V,
 169:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *                                                system frequency up to 26 MHz.
 170:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  When moving from Range 1 to Range 2, the system frequency must be decreased to
 171:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        a value below 26 MHz before calling HAL_PWREx_ControlVoltageScaling() API.
 172:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        When moving from Range 2 to Range 1, the system frequency can be increased to
 173:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        a value up to 80 MHz after calling HAL_PWREx_ControlVoltageScaling() API. For
 174:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        some devices, the system frequency can be increased up to 120 MHz.
 175:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  When moving from Range 2 to Range 1, the API waits for VOSF flag to be
 176:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        cleared before returning the status. If the flag is not cleared within
 177:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        50 microseconds, HAL_TIMEOUT status is reported.
 178:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval HAL Status
 179:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 180:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
 181:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
  57              		.loc 1 181 1 is_stmt 1 view -0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61              		@ link register save eliminated.
 182:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   uint32_t wait_loop_index;
  62              		.loc 1 182 3 view .LVU5
 183:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 184:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  63              		.loc 1 184 3 view .LVU6
 185:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 186:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(PWR_CR5_R1MODE)
 187:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 188:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 189:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* If current range is range 2 */
 190:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 191:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     {
 192:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Make sure Range 1 Boost is enabled */
 193:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 194:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 195:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Set Range 1 */
 196:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 197:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 198:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Wait until VOSF is cleared */
 199:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 200:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 201:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
 202:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         wait_loop_index--;
 203:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
 204:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 205:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
 206:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         return HAL_TIMEOUT;
 207:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
 208:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     }
 209:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* If current range is range 1 normal or boost mode */
 210:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     else
 211:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     {
 212:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Enable Range 1 Boost (no issue if bit already reset) */
 213:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 214:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     }
 215:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
 216:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 217:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 218:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* If current range is range 2 */
 219:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 220:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     {
 221:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Make sure Range 1 Boost is disabled */
 222:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 223:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 224:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Set Range 1 */
 225:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 226:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 227:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Wait until VOSF is cleared */
 228:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 229:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 230:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
 231:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         wait_loop_index--;
 232:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
 233:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 234:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
 235:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         return HAL_TIMEOUT;
 236:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
 237:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     }
 238:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****      /* If current range is range 1 normal or boost mode */
 239:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     else
 240:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     {
 241:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Disable Range 1 Boost (no issue if bit already set) */
 242:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 243:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     }
 244:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
 245:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   else
 246:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 247:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* Set Range 2 */
 248:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 249:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* No need to wait for VOSF to be cleared for this transition */
 250:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
 251:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
 252:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 253:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #else
 254:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 255:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* If Set Range 1 */
 256:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  64              		.loc 1 256 3 view .LVU7
  65 0000 174B     		ldr	r3, .L20
 257:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 258:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
  66              		.loc 1 258 9 is_stmt 0 view .LVU8
  67 0002 1A68     		ldr	r2, [r3]
 256:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
  68              		.loc 1 256 6 view .LVU9
  69 0004 B0F5007F 		cmp	r0, #512
  70              		.loc 1 258 9 view .LVU10
  71 0008 02F4C062 		and	r2, r2, #1536
 256:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
  72              		.loc 1 256 6 view .LVU11
  73 000c 1ED1     		bne	.L5
  74              		.loc 1 258 5 is_stmt 1 view .LVU12
  75              		.loc 1 258 8 is_stmt 0 view .LVU13
  76 000e B2F5007F 		cmp	r2, #512
  77 0012 01D1     		bne	.L6
  78              	.LVL1:
  79              	.L19:
 259:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     {
 260:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Set Range 1 */
 261:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 262:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 263:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Wait until VOSF is cleared */
 264:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 265:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 266:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
 267:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         wait_loop_index--;
 268:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
 269:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 270:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
 271:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         return HAL_TIMEOUT;
 272:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
 273:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     }
 274:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
 275:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   else
 276:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 277:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 278:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     {
 279:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Set Range 2 */
 280:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 281:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* No need to wait for VOSF to be cleared for this transition */
 282:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     }
 283:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
 284:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 285:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 286:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   return HAL_OK;
  80              		.loc 1 286 10 view .LVU14
  81 0014 0020     		movs	r0, #0
  82 0016 7047     		bx	lr
  83              	.LVL2:
  84              	.L6:
 261:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
  85              		.loc 1 261 7 is_stmt 1 view .LVU15
  86 0018 1A68     		ldr	r2, [r3]
  87 001a 22F4C062 		bic	r2, r2, #1536
  88 001e 42F40072 		orr	r2, r2, #512
  89 0022 1A60     		str	r2, [r3]
 264:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
  90              		.loc 1 264 7 view .LVU16
 264:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
  91              		.loc 1 264 53 is_stmt 0 view .LVU17
  92 0024 0F4A     		ldr	r2, .L20+4
  93 0026 1168     		ldr	r1, [r2]
  94 0028 3222     		movs	r2, #50
  95 002a 4A43     		muls	r2, r1, r2
 264:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
  96              		.loc 1 264 72 view .LVU18
  97 002c 0E49     		ldr	r1, .L20+8
  98 002e B2FBF1F2 		udiv	r2, r2, r1
  99 0032 1946     		mov	r1, r3
 264:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 100              		.loc 1 264 23 view .LVU19
 101 0034 0132     		adds	r2, r2, #1
 102              	.LVL3:
 265:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
 103              		.loc 1 265 7 is_stmt 1 view .LVU20
 104              	.L8:
 265:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
 105              		.loc 1 265 13 view .LVU21
 265:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
 106              		.loc 1 265 15 is_stmt 0 view .LVU22
 107 0036 5869     		ldr	r0, [r3, #20]
 265:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
 108              		.loc 1 265 13 view .LVU23
 109 0038 4005     		lsls	r0, r0, #21
 110 003a 00D5     		bpl	.L9
 265:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
 111              		.loc 1 265 55 discriminator 1 view .LVU24
 112 003c 22B9     		cbnz	r2, .L10
 113              	.L9:
 269:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
 114              		.loc 1 269 7 is_stmt 1 view .LVU25
 269:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
 115              		.loc 1 269 11 is_stmt 0 view .LVU26
 116 003e 4B69     		ldr	r3, [r1, #20]
 269:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
 117              		.loc 1 269 10 view .LVU27
 118 0040 5B05     		lsls	r3, r3, #21
 119 0042 E7D5     		bpl	.L19
 271:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
 120              		.loc 1 271 16 view .LVU28
 121 0044 0320     		movs	r0, #3
 287:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 122              		.loc 1 287 1 view .LVU29
 123 0046 7047     		bx	lr
 124              	.L10:
 267:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
 125              		.loc 1 267 9 is_stmt 1 view .LVU30
 267:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
 126              		.loc 1 267 24 is_stmt 0 view .LVU31
 127 0048 013A     		subs	r2, r2, #1
 128              	.LVL4:
 267:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
 129              		.loc 1 267 24 view .LVU32
 130 004a F4E7     		b	.L8
 131              	.LVL5:
 132              	.L5:
 277:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     {
 133              		.loc 1 277 5 is_stmt 1 view .LVU33
 277:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     {
 134              		.loc 1 277 8 is_stmt 0 view .LVU34
 135 004c B2F5806F 		cmp	r2, #1024
 280:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* No need to wait for VOSF to be cleared for this transition */
 136              		.loc 1 280 7 is_stmt 1 view .LVU35
 137 0050 1FBF     		itttt	ne
 138 0052 1A68     		ldrne	r2, [r3]
 139 0054 22F4C062 		bicne	r2, r2, #1536
 140 0058 42F48062 		orrne	r2, r2, #1024
 141 005c 1A60     		strne	r2, [r3]
 142 005e D9E7     		b	.L19
 143              	.L21:
 144              		.align	2
 145              	.L20:
 146 0060 00700040 		.word	1073770496
 147 0064 00000000 		.word	SystemCoreClock
 148 0068 40420F00 		.word	1000000
 149              		.cfi_endproc
 150              	.LFE310:
 152              		.section	.text.HAL_PWREx_EnableBatteryCharging,"ax",%progbits
 153              		.align	1
 154              		.global	HAL_PWREx_EnableBatteryCharging
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
 158              		.fpu softvfp
 160              	HAL_PWREx_EnableBatteryCharging:
 161              	.LVL6:
 162              	.LFB311:
 288:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 289:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 290:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 291:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enable battery charging.
 292:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        When VDD is present, charge the external battery on VBAT thru an internal resistor.
 293:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @param  ResistorSelection: specifies the resistor impedance.
 294:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 295:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *            @arg @ref PWR_BATTERY_CHARGING_RESISTOR_5     5 kOhms resistor
 296:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *            @arg @ref PWR_BATTERY_CHARGING_RESISTOR_1_5 1.5 kOhms resistor
 297:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 298:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 299:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_EnableBatteryCharging(uint32_t ResistorSelection)
 300:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 163              		.loc 1 300 1 view -0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 301:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   assert_param(IS_PWR_BATTERY_RESISTOR_SELECT(ResistorSelection));
 168              		.loc 1 301 3 view .LVU37
 302:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 303:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Specify resistor selection */
 304:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->CR4, PWR_CR4_VBRS, ResistorSelection);
 169              		.loc 1 304 3 view .LVU38
 170 0000 054A     		ldr	r2, .L23
 171 0002 D368     		ldr	r3, [r2, #12]
 172 0004 23F40073 		bic	r3, r3, #512
 173 0008 0343     		orrs	r3, r3, r0
 174 000a D360     		str	r3, [r2, #12]
 305:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 306:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Enable battery charging */
 307:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR4, PWR_CR4_VBE);
 175              		.loc 1 307 3 view .LVU39
 176 000c D368     		ldr	r3, [r2, #12]
 177 000e 43F48073 		orr	r3, r3, #256
 178 0012 D360     		str	r3, [r2, #12]
 308:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 179              		.loc 1 308 1 is_stmt 0 view .LVU40
 180 0014 7047     		bx	lr
 181              	.L24:
 182 0016 00BF     		.align	2
 183              	.L23:
 184 0018 00700040 		.word	1073770496
 185              		.cfi_endproc
 186              	.LFE311:
 188              		.section	.text.HAL_PWREx_DisableBatteryCharging,"ax",%progbits
 189              		.align	1
 190              		.global	HAL_PWREx_DisableBatteryCharging
 191              		.syntax unified
 192              		.thumb
 193              		.thumb_func
 194              		.fpu softvfp
 196              	HAL_PWREx_DisableBatteryCharging:
 197              	.LFB312:
 309:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 310:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 311:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 312:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Disable battery charging.
 313:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 314:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 315:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_DisableBatteryCharging(void)
 316:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 198              		.loc 1 316 1 is_stmt 1 view -0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 0
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202              		@ link register save eliminated.
 317:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR4, PWR_CR4_VBE);
 203              		.loc 1 317 3 view .LVU42
 204 0000 024A     		ldr	r2, .L26
 205 0002 D368     		ldr	r3, [r2, #12]
 206 0004 23F48073 		bic	r3, r3, #256
 207 0008 D360     		str	r3, [r2, #12]
 318:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 208              		.loc 1 318 1 is_stmt 0 view .LVU43
 209 000a 7047     		bx	lr
 210              	.L27:
 211              		.align	2
 212              	.L26:
 213 000c 00700040 		.word	1073770496
 214              		.cfi_endproc
 215              	.LFE312:
 217              		.section	.text.HAL_PWREx_EnableVddUSB,"ax",%progbits
 218              		.align	1
 219              		.global	HAL_PWREx_EnableVddUSB
 220              		.syntax unified
 221              		.thumb
 222              		.thumb_func
 223              		.fpu softvfp
 225              	HAL_PWREx_EnableVddUSB:
 226              	.LFB313:
 319:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 320:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 321:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(PWR_CR2_USV)
 322:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 323:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enable VDDUSB supply.
 324:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
 325:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 326:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 327:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_EnableVddUSB(void)
 328:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 227              		.loc 1 328 1 is_stmt 1 view -0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              		@ link register save eliminated.
 329:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR2, PWR_CR2_USV);
 232              		.loc 1 329 3 view .LVU45
 233 0000 024A     		ldr	r2, .L29
 234 0002 5368     		ldr	r3, [r2, #4]
 235 0004 43F48063 		orr	r3, r3, #1024
 236 0008 5360     		str	r3, [r2, #4]
 330:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 237              		.loc 1 330 1 is_stmt 0 view .LVU46
 238 000a 7047     		bx	lr
 239              	.L30:
 240              		.align	2
 241              	.L29:
 242 000c 00700040 		.word	1073770496
 243              		.cfi_endproc
 244              	.LFE313:
 246              		.section	.text.HAL_PWREx_DisableVddUSB,"ax",%progbits
 247              		.align	1
 248              		.global	HAL_PWREx_DisableVddUSB
 249              		.syntax unified
 250              		.thumb
 251              		.thumb_func
 252              		.fpu softvfp
 254              	HAL_PWREx_DisableVddUSB:
 255              	.LFB314:
 331:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 332:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 333:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 334:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Disable VDDUSB supply.
 335:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 336:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 337:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_DisableVddUSB(void)
 338:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 256              		.loc 1 338 1 is_stmt 1 view -0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              		@ link register save eliminated.
 339:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR2, PWR_CR2_USV);
 261              		.loc 1 339 3 view .LVU48
 262 0000 024A     		ldr	r2, .L32
 263 0002 5368     		ldr	r3, [r2, #4]
 264 0004 23F48063 		bic	r3, r3, #1024
 265 0008 5360     		str	r3, [r2, #4]
 340:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 266              		.loc 1 340 1 is_stmt 0 view .LVU49
 267 000a 7047     		bx	lr
 268              	.L33:
 269              		.align	2
 270              	.L32:
 271 000c 00700040 		.word	1073770496
 272              		.cfi_endproc
 273              	.LFE314:
 275              		.section	.text.HAL_PWREx_EnableInternalWakeUpLine,"ax",%progbits
 276              		.align	1
 277              		.global	HAL_PWREx_EnableInternalWakeUpLine
 278              		.syntax unified
 279              		.thumb
 280              		.thumb_func
 281              		.fpu softvfp
 283              	HAL_PWREx_EnableInternalWakeUpLine:
 284              	.LFB315:
 341:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif /* PWR_CR2_USV */
 342:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 343:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(PWR_CR2_IOSV)
 344:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 345:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enable VDDIO2 supply.
 346:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
 347:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 348:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 349:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_EnableVddIO2(void)
 350:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 351:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 352:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 353:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 354:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 355:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 356:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Disable VDDIO2 supply.
 357:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 358:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 359:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_DisableVddIO2(void)
 360:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 361:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
 362:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 363:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif /* PWR_CR2_IOSV */
 364:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 365:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 366:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 367:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enable Internal Wake-up Line.
 368:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 369:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 370:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_EnableInternalWakeUpLine(void)
 371:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 285              		.loc 1 371 1 is_stmt 1 view -0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 0
 288              		@ frame_needed = 0, uses_anonymous_args = 0
 289              		@ link register save eliminated.
 372:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 290              		.loc 1 372 3 view .LVU51
 291 0000 024A     		ldr	r2, .L35
 292 0002 9368     		ldr	r3, [r2, #8]
 293 0004 43F40043 		orr	r3, r3, #32768
 294 0008 9360     		str	r3, [r2, #8]
 373:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 295              		.loc 1 373 1 is_stmt 0 view .LVU52
 296 000a 7047     		bx	lr
 297              	.L36:
 298              		.align	2
 299              	.L35:
 300 000c 00700040 		.word	1073770496
 301              		.cfi_endproc
 302              	.LFE315:
 304              		.section	.text.HAL_PWREx_DisableInternalWakeUpLine,"ax",%progbits
 305              		.align	1
 306              		.global	HAL_PWREx_DisableInternalWakeUpLine
 307              		.syntax unified
 308              		.thumb
 309              		.thumb_func
 310              		.fpu softvfp
 312              	HAL_PWREx_DisableInternalWakeUpLine:
 313              	.LFB316:
 374:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 375:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 376:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 377:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Disable Internal Wake-up Line.
 378:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 379:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 380:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_DisableInternalWakeUpLine(void)
 381:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 314              		.loc 1 381 1 is_stmt 1 view -0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 318              		@ link register save eliminated.
 382:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR3, PWR_CR3_EIWF);
 319              		.loc 1 382 3 view .LVU54
 320 0000 024A     		ldr	r2, .L38
 321 0002 9368     		ldr	r3, [r2, #8]
 322 0004 23F40043 		bic	r3, r3, #32768
 323 0008 9360     		str	r3, [r2, #8]
 383:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 324              		.loc 1 383 1 is_stmt 0 view .LVU55
 325 000a 7047     		bx	lr
 326              	.L39:
 327              		.align	2
 328              	.L38:
 329 000c 00700040 		.word	1073770496
 330              		.cfi_endproc
 331              	.LFE316:
 333              		.section	.text.HAL_PWREx_EnableGPIOPullUp,"ax",%progbits
 334              		.align	1
 335              		.global	HAL_PWREx_EnableGPIOPullUp
 336              		.syntax unified
 337              		.thumb
 338              		.thumb_func
 339              		.fpu softvfp
 341              	HAL_PWREx_EnableGPIOPullUp:
 342              	.LVL7:
 343              	.LFB317:
 384:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 385:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 386:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 387:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 388:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enable GPIO pull-up state in Standby and Shutdown modes.
 389:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  Set the relevant PUy bits of PWR_PUCRx register to configure the I/O in
 390:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        pull-up state in Standby and Shutdown modes.
 391:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  This state is effective in Standby and Shutdown modes only if APC bit
 392:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
 393:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  The configuration is lost when exiting the Shutdown mode due to the
 394:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        power-on reset, maintained when exiting the Standby mode.
 395:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  To avoid any conflict at Standby and Shutdown modes exits, the corresponding
 396:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        PDy bit of PWR_PDCRx register is cleared unless it is reserved.
 397:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  Even if a PUy bit to set is reserved, the other PUy bits entered as input
 398:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        parameter at the same time are set.
 399:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @param  GPIO: Specify the IO port. This parameter can be PWR_GPIO_A, ..., PWR_GPIO_H
 400:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         (or PWR_GPIO_I depending on the devices) to select the GPIO peripheral.
 401:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @param  GPIONumber: Specify the I/O pins numbers.
 402:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
 403:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         PWR_GPIO_BIT_0, ..., PWR_GPIO_BIT_15 (except for the port where less
 404:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         I/O pins are available) or the logical OR of several of them to set
 405:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         several bits for a given port in a single API call.
 406:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval HAL Status
 407:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 408:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
 409:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 344              		.loc 1 409 1 is_stmt 1 view -0
 345              		.cfi_startproc
 346              		@ args = 0, pretend = 0, frame = 0
 347              		@ frame_needed = 0, uses_anonymous_args = 0
 348              		@ link register save eliminated.
 410:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 349              		.loc 1 410 3 view .LVU57
 411:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 412:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   assert_param(IS_PWR_GPIO(GPIO));
 350              		.loc 1 412 3 view .LVU58
 413:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));
 351              		.loc 1 413 3 view .LVU59
 414:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 415:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   switch (GPIO)
 352              		.loc 1 415 3 view .LVU60
 353 0000 0728     		cmp	r0, #7
 354 0002 44D8     		bhi	.L49
 355 0004 DFE800F0 		tbb	[pc, r0]
 356              	.L43:
 357 0008 04       		.byte	(.L48-.L43)/2
 358 0009 12       		.byte	(.L47-.L43)/2
 359 000a 1D       		.byte	(.L46-.L43)/2
 360 000b 26       		.byte	(.L45-.L43)/2
 361 000c 2F       		.byte	(.L44-.L43)/2
 362 000d 43       		.byte	(.L49-.L43)/2
 363 000e 43       		.byte	(.L49-.L43)/2
 364 000f 38       		.byte	(.L42-.L43)/2
 365              		.p2align 1
 366              	.L48:
 416:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 417:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_A:
 418:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        SET_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 367              		.loc 1 418 8 view .LVU61
 368 0010 204B     		ldr	r3, .L51
 369 0012 186A     		ldr	r0, [r3, #32]
 370              	.LVL8:
 371              		.loc 1 418 8 is_stmt 0 view .LVU62
 372 0014 21F48042 		bic	r2, r1, #16384
 373 0018 0243     		orrs	r2, r2, r0
 374 001a 1A62     		str	r2, [r3, #32]
 419:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 375              		.loc 1 419 8 is_stmt 1 view .LVU63
 376 001c 5A6A     		ldr	r2, [r3, #36]
 377 001e 21F42041 		bic	r1, r1, #40960
 378              	.LVL9:
 379              		.loc 1 419 8 is_stmt 0 view .LVU64
 380 0022 22EA0101 		bic	r1, r2, r1
 381 0026 5962     		str	r1, [r3, #36]
 420:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 382              		.loc 1 420 8 is_stmt 1 view .LVU65
 383              	.L50:
 421:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_B:
 422:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        SET_BIT(PWR->PUCRB, GPIONumber);
 423:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 424:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 384              		.loc 1 424 8 view .LVU66
 410:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 385              		.loc 1 410 21 is_stmt 0 view .LVU67
 386 0028 0020     		movs	r0, #0
 387              		.loc 1 424 8 view .LVU68
 388 002a 7047     		bx	lr
 389              	.LVL10:
 390              	.L47:
 422:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 391              		.loc 1 422 8 is_stmt 1 view .LVU69
 392 002c 194B     		ldr	r3, .L51
 393 002e 9A6A     		ldr	r2, [r3, #40]
 394 0030 0A43     		orrs	r2, r2, r1
 395 0032 9A62     		str	r2, [r3, #40]
 423:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 396              		.loc 1 423 8 view .LVU70
 397 0034 DA6A     		ldr	r2, [r3, #44]
 398 0036 21F01001 		bic	r1, r1, #16
 399              	.LVL11:
 423:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 400              		.loc 1 423 8 is_stmt 0 view .LVU71
 401 003a 22EA0101 		bic	r1, r2, r1
 402 003e D962     		str	r1, [r3, #44]
 403 0040 F2E7     		b	.L50
 404              	.LVL12:
 405              	.L46:
 425:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_C:
 426:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        SET_BIT(PWR->PUCRC, GPIONumber);
 406              		.loc 1 426 8 is_stmt 1 view .LVU72
 407 0042 144B     		ldr	r3, .L51
 408 0044 1A6B     		ldr	r2, [r3, #48]
 409 0046 0A43     		orrs	r2, r2, r1
 410 0048 1A63     		str	r2, [r3, #48]
 427:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRC, GPIONumber);
 411              		.loc 1 427 8 view .LVU73
 412 004a 5A6B     		ldr	r2, [r3, #52]
 413 004c 22EA0101 		bic	r1, r2, r1
 414              	.LVL13:
 415              		.loc 1 427 8 is_stmt 0 view .LVU74
 416 0050 5963     		str	r1, [r3, #52]
 428:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 417              		.loc 1 428 8 is_stmt 1 view .LVU75
 418 0052 E9E7     		b	.L50
 419              	.LVL14:
 420              	.L45:
 429:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(GPIOD)
 430:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_D:
 431:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        SET_BIT(PWR->PUCRD, GPIONumber);
 421              		.loc 1 431 8 view .LVU76
 422 0054 0F4B     		ldr	r3, .L51
 423 0056 9A6B     		ldr	r2, [r3, #56]
 424 0058 0A43     		orrs	r2, r2, r1
 425 005a 9A63     		str	r2, [r3, #56]
 432:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRD, GPIONumber);
 426              		.loc 1 432 8 view .LVU77
 427 005c DA6B     		ldr	r2, [r3, #60]
 428 005e 22EA0101 		bic	r1, r2, r1
 429              	.LVL15:
 430              		.loc 1 432 8 is_stmt 0 view .LVU78
 431 0062 D963     		str	r1, [r3, #60]
 433:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 432              		.loc 1 433 8 is_stmt 1 view .LVU79
 433 0064 E0E7     		b	.L50
 434              	.LVL16:
 435              	.L44:
 434:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 435:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(GPIOE)
 436:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_E:
 437:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        SET_BIT(PWR->PUCRE, GPIONumber);
 436              		.loc 1 437 8 view .LVU80
 437 0066 0B4B     		ldr	r3, .L51
 438 0068 1A6C     		ldr	r2, [r3, #64]
 439 006a 0A43     		orrs	r2, r2, r1
 440 006c 1A64     		str	r2, [r3, #64]
 438:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRE, GPIONumber);
 441              		.loc 1 438 8 view .LVU81
 442 006e 5A6C     		ldr	r2, [r3, #68]
 443 0070 22EA0101 		bic	r1, r2, r1
 444              	.LVL17:
 445              		.loc 1 438 8 is_stmt 0 view .LVU82
 446 0074 5964     		str	r1, [r3, #68]
 439:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 447              		.loc 1 439 8 is_stmt 1 view .LVU83
 448 0076 D7E7     		b	.L50
 449              	.LVL18:
 450              	.L42:
 440:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 441:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(GPIOF)
 442:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_F:
 443:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        SET_BIT(PWR->PUCRF, GPIONumber);
 444:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRF, GPIONumber);
 445:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 446:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 447:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(GPIOG)
 448:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_G:
 449:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        SET_BIT(PWR->PUCRG, GPIONumber);
 450:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRG, GPIONumber);
 451:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 452:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 453:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_H:
 454:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        SET_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 451              		.loc 1 454 8 view .LVU84
 452 0078 064B     		ldr	r3, .L51
 453 007a 9A6D     		ldr	r2, [r3, #88]
 454 007c 01F00B01 		and	r1, r1, #11
 455              	.LVL19:
 456              		.loc 1 454 8 is_stmt 0 view .LVU85
 457 0080 0A43     		orrs	r2, r2, r1
 458 0082 9A65     		str	r2, [r3, #88]
 455:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined (STM32L496xx) || defined (STM32L4A6xx)
 456:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
 457:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #else
 458:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 459              		.loc 1 458 8 is_stmt 1 view .LVU86
 460 0084 DA6D     		ldr	r2, [r3, #92]
 461 0086 22EA0101 		bic	r1, r2, r1
 462 008a D965     		str	r1, [r3, #92]
 459:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 460:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 463              		.loc 1 460 8 view .LVU87
 464 008c CCE7     		b	.L50
 465              	.LVL20:
 466              	.L49:
 410:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 467              		.loc 1 410 21 is_stmt 0 view .LVU88
 468 008e 0120     		movs	r0, #1
 469              	.LVL21:
 461:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(GPIOI)
 462:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_I:
 463:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        SET_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
 464:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
 465:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 466:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 467:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     default:
 468:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       status = HAL_ERROR;
 469:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       break;
 470:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
 471:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 472:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   return status;
 470              		.loc 1 472 3 is_stmt 1 view .LVU89
 473:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 471              		.loc 1 473 1 is_stmt 0 view .LVU90
 472 0090 7047     		bx	lr
 473              	.L52:
 474 0092 00BF     		.align	2
 475              	.L51:
 476 0094 00700040 		.word	1073770496
 477              		.cfi_endproc
 478              	.LFE317:
 480              		.section	.text.HAL_PWREx_DisableGPIOPullUp,"ax",%progbits
 481              		.align	1
 482              		.global	HAL_PWREx_DisableGPIOPullUp
 483              		.syntax unified
 484              		.thumb
 485              		.thumb_func
 486              		.fpu softvfp
 488              	HAL_PWREx_DisableGPIOPullUp:
 489              	.LVL22:
 490              	.LFB318:
 474:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 475:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 476:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 477:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Disable GPIO pull-up state in Standby mode and Shutdown modes.
 478:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  Reset the relevant PUy bits of PWR_PUCRx register used to configure the I/O
 479:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        in pull-up state in Standby and Shutdown modes.
 480:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  Even if a PUy bit to reset is reserved, the other PUy bits entered as input
 481:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        parameter at the same time are reset.
 482:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @param  GPIO: Specifies the IO port. This parameter can be PWR_GPIO_A, ..., PWR_GPIO_H
 483:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *          (or PWR_GPIO_I depending on the devices) to select the GPIO peripheral.
 484:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @param  GPIONumber: Specify the I/O pins numbers.
 485:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
 486:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         PWR_GPIO_BIT_0, ..., PWR_GPIO_BIT_15 (except for the port where less
 487:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         I/O pins are available) or the logical OR of several of them to reset
 488:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         several bits for a given port in a single API call.
 489:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval HAL Status
 490:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 491:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
 492:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 491              		.loc 1 492 1 is_stmt 1 view -0
 492              		.cfi_startproc
 493              		@ args = 0, pretend = 0, frame = 0
 494              		@ frame_needed = 0, uses_anonymous_args = 0
 495              		@ link register save eliminated.
 493:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 496              		.loc 1 493 3 view .LVU92
 494:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 495:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   assert_param(IS_PWR_GPIO(GPIO));
 497              		.loc 1 495 3 view .LVU93
 496:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));
 498              		.loc 1 496 3 view .LVU94
 497:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 498:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   switch (GPIO)
 499              		.loc 1 498 3 view .LVU95
 500 0000 0728     		cmp	r0, #7
 501 0002 2ED8     		bhi	.L62
 502 0004 DFE800F0 		tbb	[pc, r0]
 503              	.L56:
 504 0008 04       		.byte	(.L61-.L56)/2
 505 0009 0D       		.byte	(.L60-.L56)/2
 506 000a 13       		.byte	(.L59-.L56)/2
 507 000b 19       		.byte	(.L58-.L56)/2
 508 000c 1F       		.byte	(.L57-.L56)/2
 509 000d 2D       		.byte	(.L62-.L56)/2
 510 000e 2D       		.byte	(.L62-.L56)/2
 511 000f 25       		.byte	(.L55-.L56)/2
 512              		.p2align 1
 513              	.L61:
 499:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 500:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_A:
 501:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 514              		.loc 1 501 8 view .LVU96
 515 0010 154A     		ldr	r2, .L64
 516 0012 136A     		ldr	r3, [r2, #32]
 517 0014 21F48041 		bic	r1, r1, #16384
 518              	.LVL23:
 519              		.loc 1 501 8 is_stmt 0 view .LVU97
 520 0018 23EA0101 		bic	r1, r3, r1
 521 001c 1162     		str	r1, [r2, #32]
 502:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 522              		.loc 1 502 8 is_stmt 1 view .LVU98
 523              	.L63:
 503:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_B:
 504:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRB, GPIONumber);
 505:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 524              		.loc 1 505 8 view .LVU99
 493:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 525              		.loc 1 493 21 is_stmt 0 view .LVU100
 526 001e 0020     		movs	r0, #0
 527              	.LVL24:
 528              		.loc 1 505 8 view .LVU101
 529 0020 7047     		bx	lr
 530              	.LVL25:
 531              	.L60:
 504:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 532              		.loc 1 504 8 is_stmt 1 view .LVU102
 533 0022 114A     		ldr	r2, .L64
 534 0024 936A     		ldr	r3, [r2, #40]
 535 0026 23EA0101 		bic	r1, r3, r1
 536              	.LVL26:
 504:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 537              		.loc 1 504 8 is_stmt 0 view .LVU103
 538 002a 9162     		str	r1, [r2, #40]
 539 002c F7E7     		b	.L63
 540              	.LVL27:
 541              	.L59:
 506:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_C:
 507:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRC, GPIONumber);
 542              		.loc 1 507 8 is_stmt 1 view .LVU104
 543 002e 0E4A     		ldr	r2, .L64
 544 0030 136B     		ldr	r3, [r2, #48]
 545 0032 23EA0101 		bic	r1, r3, r1
 546              	.LVL28:
 547              		.loc 1 507 8 is_stmt 0 view .LVU105
 548 0036 1163     		str	r1, [r2, #48]
 508:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 549              		.loc 1 508 8 is_stmt 1 view .LVU106
 550 0038 F1E7     		b	.L63
 551              	.LVL29:
 552              	.L58:
 509:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(GPIOD)
 510:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_D:
 511:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRD, GPIONumber);
 553              		.loc 1 511 8 view .LVU107
 554 003a 0B4A     		ldr	r2, .L64
 555 003c 936B     		ldr	r3, [r2, #56]
 556 003e 23EA0101 		bic	r1, r3, r1
 557              	.LVL30:
 558              		.loc 1 511 8 is_stmt 0 view .LVU108
 559 0042 9163     		str	r1, [r2, #56]
 512:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 560              		.loc 1 512 8 is_stmt 1 view .LVU109
 561 0044 EBE7     		b	.L63
 562              	.LVL31:
 563              	.L57:
 513:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 514:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(GPIOE)
 515:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_E:
 516:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRE, GPIONumber);
 564              		.loc 1 516 8 view .LVU110
 565 0046 084A     		ldr	r2, .L64
 566 0048 136C     		ldr	r3, [r2, #64]
 567 004a 23EA0101 		bic	r1, r3, r1
 568              	.LVL32:
 569              		.loc 1 516 8 is_stmt 0 view .LVU111
 570 004e 1164     		str	r1, [r2, #64]
 517:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 571              		.loc 1 517 8 is_stmt 1 view .LVU112
 572 0050 E5E7     		b	.L63
 573              	.LVL33:
 574              	.L55:
 518:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 519:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(GPIOF)
 520:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_F:
 521:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRF, GPIONumber);
 522:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 523:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 524:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(GPIOG)
 525:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_G:
 526:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRG, GPIONumber);
 527:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 528:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 529:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_H:
 530:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 575              		.loc 1 530 8 view .LVU113
 576 0052 054A     		ldr	r2, .L64
 577 0054 936D     		ldr	r3, [r2, #88]
 578 0056 01F00B01 		and	r1, r1, #11
 579              	.LVL34:
 580              		.loc 1 530 8 is_stmt 0 view .LVU114
 581 005a 23EA0101 		bic	r1, r3, r1
 582 005e 9165     		str	r1, [r2, #88]
 531:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 583              		.loc 1 531 8 is_stmt 1 view .LVU115
 584 0060 DDE7     		b	.L63
 585              	.LVL35:
 586              	.L62:
 493:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 587              		.loc 1 493 21 is_stmt 0 view .LVU116
 588 0062 0120     		movs	r0, #1
 589              	.LVL36:
 532:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(GPIOI)
 533:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_I:
 534:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
 535:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 536:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 537:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     default:
 538:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        status = HAL_ERROR;
 539:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 540:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
 541:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 542:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   return status;
 590              		.loc 1 542 3 is_stmt 1 view .LVU117
 543:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 591              		.loc 1 543 1 is_stmt 0 view .LVU118
 592 0064 7047     		bx	lr
 593              	.L65:
 594 0066 00BF     		.align	2
 595              	.L64:
 596 0068 00700040 		.word	1073770496
 597              		.cfi_endproc
 598              	.LFE318:
 600              		.section	.text.HAL_PWREx_EnableGPIOPullDown,"ax",%progbits
 601              		.align	1
 602              		.global	HAL_PWREx_EnableGPIOPullDown
 603              		.syntax unified
 604              		.thumb
 605              		.thumb_func
 606              		.fpu softvfp
 608              	HAL_PWREx_EnableGPIOPullDown:
 609              	.LVL37:
 610              	.LFB319:
 544:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 545:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 546:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 547:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 548:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enable GPIO pull-down state in Standby and Shutdown modes.
 549:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  Set the relevant PDy bits of PWR_PDCRx register to configure the I/O in
 550:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        pull-down state in Standby and Shutdown modes.
 551:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  This state is effective in Standby and Shutdown modes only if APC bit
 552:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
 553:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  The configuration is lost when exiting the Shutdown mode due to the
 554:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        power-on reset, maintained when exiting the Standby mode.
 555:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  To avoid any conflict at Standby and Shutdown modes exits, the corresponding
 556:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        PUy bit of PWR_PUCRx register is cleared unless it is reserved.
 557:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  Even if a PDy bit to set is reserved, the other PDy bits entered as input
 558:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        parameter at the same time are set.
 559:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @param  GPIO: Specify the IO port. This parameter can be PWR_GPIO_A..PWR_GPIO_H
 560:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         (or PWR_GPIO_I depending on the devices) to select the GPIO peripheral.
 561:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @param  GPIONumber: Specify the I/O pins numbers.
 562:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
 563:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         PWR_GPIO_BIT_0, ..., PWR_GPIO_BIT_15 (except for the port where less
 564:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         I/O pins are available) or the logical OR of several of them to set
 565:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         several bits for a given port in a single API call.
 566:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval HAL Status
 567:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 568:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
 569:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 611              		.loc 1 569 1 is_stmt 1 view -0
 612              		.cfi_startproc
 613              		@ args = 0, pretend = 0, frame = 0
 614              		@ frame_needed = 0, uses_anonymous_args = 0
 615              		@ link register save eliminated.
 570:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 616              		.loc 1 570 3 view .LVU120
 571:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 572:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   assert_param(IS_PWR_GPIO(GPIO));
 617              		.loc 1 572 3 view .LVU121
 573:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));
 618              		.loc 1 573 3 view .LVU122
 574:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 575:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   switch (GPIO)
 619              		.loc 1 575 3 view .LVU123
 620 0000 0728     		cmp	r0, #7
 621 0002 44D8     		bhi	.L75
 622 0004 DFE800F0 		tbb	[pc, r0]
 623              	.L69:
 624 0008 04       		.byte	(.L74-.L69)/2
 625 0009 12       		.byte	(.L73-.L69)/2
 626 000a 1D       		.byte	(.L72-.L69)/2
 627 000b 26       		.byte	(.L71-.L69)/2
 628 000c 2F       		.byte	(.L70-.L69)/2
 629 000d 43       		.byte	(.L75-.L69)/2
 630 000e 43       		.byte	(.L75-.L69)/2
 631 000f 38       		.byte	(.L68-.L69)/2
 632              		.p2align 1
 633              	.L74:
 576:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 577:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_A:
 578:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        SET_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 634              		.loc 1 578 8 view .LVU124
 635 0010 204B     		ldr	r3, .L77
 636 0012 586A     		ldr	r0, [r3, #36]
 637              	.LVL38:
 638              		.loc 1 578 8 is_stmt 0 view .LVU125
 639 0014 21F42042 		bic	r2, r1, #40960
 640 0018 0243     		orrs	r2, r2, r0
 641 001a 5A62     		str	r2, [r3, #36]
 579:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRA, (GPIONumber & (~(PWR_GPIO_BIT_14))));
 642              		.loc 1 579 8 is_stmt 1 view .LVU126
 643 001c 1A6A     		ldr	r2, [r3, #32]
 644 001e 21F48041 		bic	r1, r1, #16384
 645              	.LVL39:
 646              		.loc 1 579 8 is_stmt 0 view .LVU127
 647 0022 22EA0101 		bic	r1, r2, r1
 648 0026 1962     		str	r1, [r3, #32]
 580:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 649              		.loc 1 580 8 is_stmt 1 view .LVU128
 650              	.L76:
 581:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_B:
 582:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        SET_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 583:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRB, GPIONumber);
 584:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 651              		.loc 1 584 8 view .LVU129
 570:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 652              		.loc 1 570 21 is_stmt 0 view .LVU130
 653 0028 0020     		movs	r0, #0
 654              		.loc 1 584 8 view .LVU131
 655 002a 7047     		bx	lr
 656              	.LVL40:
 657              	.L73:
 582:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRB, GPIONumber);
 658              		.loc 1 582 8 is_stmt 1 view .LVU132
 659 002c 194B     		ldr	r3, .L77
 660 002e D86A     		ldr	r0, [r3, #44]
 661              	.LVL41:
 582:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRB, GPIONumber);
 662              		.loc 1 582 8 is_stmt 0 view .LVU133
 663 0030 21F01002 		bic	r2, r1, #16
 664 0034 0243     		orrs	r2, r2, r0
 665 0036 DA62     		str	r2, [r3, #44]
 583:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 666              		.loc 1 583 8 is_stmt 1 view .LVU134
 667 0038 9A6A     		ldr	r2, [r3, #40]
 668 003a 22EA0101 		bic	r1, r2, r1
 669              	.LVL42:
 583:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 670              		.loc 1 583 8 is_stmt 0 view .LVU135
 671 003e 9962     		str	r1, [r3, #40]
 672 0040 F2E7     		b	.L76
 673              	.LVL43:
 674              	.L72:
 585:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_C:
 586:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        SET_BIT(PWR->PDCRC, GPIONumber);
 675              		.loc 1 586 8 is_stmt 1 view .LVU136
 676 0042 144B     		ldr	r3, .L77
 677 0044 5A6B     		ldr	r2, [r3, #52]
 678 0046 0A43     		orrs	r2, r2, r1
 679 0048 5A63     		str	r2, [r3, #52]
 587:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRC, GPIONumber);
 680              		.loc 1 587 8 view .LVU137
 681 004a 1A6B     		ldr	r2, [r3, #48]
 682 004c 22EA0101 		bic	r1, r2, r1
 683              	.LVL44:
 684              		.loc 1 587 8 is_stmt 0 view .LVU138
 685 0050 1963     		str	r1, [r3, #48]
 588:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 686              		.loc 1 588 8 is_stmt 1 view .LVU139
 687 0052 E9E7     		b	.L76
 688              	.LVL45:
 689              	.L71:
 589:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(GPIOD)
 590:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_D:
 591:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        SET_BIT(PWR->PDCRD, GPIONumber);
 690              		.loc 1 591 8 view .LVU140
 691 0054 0F4B     		ldr	r3, .L77
 692 0056 DA6B     		ldr	r2, [r3, #60]
 693 0058 0A43     		orrs	r2, r2, r1
 694 005a DA63     		str	r2, [r3, #60]
 592:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRD, GPIONumber);
 695              		.loc 1 592 8 view .LVU141
 696 005c 9A6B     		ldr	r2, [r3, #56]
 697 005e 22EA0101 		bic	r1, r2, r1
 698              	.LVL46:
 699              		.loc 1 592 8 is_stmt 0 view .LVU142
 700 0062 9963     		str	r1, [r3, #56]
 593:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 701              		.loc 1 593 8 is_stmt 1 view .LVU143
 702 0064 E0E7     		b	.L76
 703              	.LVL47:
 704              	.L70:
 594:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 595:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(GPIOE)
 596:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_E:
 597:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        SET_BIT(PWR->PDCRE, GPIONumber);
 705              		.loc 1 597 8 view .LVU144
 706 0066 0B4B     		ldr	r3, .L77
 707 0068 5A6C     		ldr	r2, [r3, #68]
 708 006a 0A43     		orrs	r2, r2, r1
 709 006c 5A64     		str	r2, [r3, #68]
 598:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRE, GPIONumber);
 710              		.loc 1 598 8 view .LVU145
 711 006e 1A6C     		ldr	r2, [r3, #64]
 712 0070 22EA0101 		bic	r1, r2, r1
 713              	.LVL48:
 714              		.loc 1 598 8 is_stmt 0 view .LVU146
 715 0074 1964     		str	r1, [r3, #64]
 599:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 716              		.loc 1 599 8 is_stmt 1 view .LVU147
 717 0076 D7E7     		b	.L76
 718              	.LVL49:
 719              	.L68:
 600:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 601:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(GPIOF)
 602:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_F:
 603:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        SET_BIT(PWR->PDCRF, GPIONumber);
 604:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRF, GPIONumber);
 605:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 606:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 607:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(GPIOG)
 608:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_G:
 609:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        SET_BIT(PWR->PDCRG, GPIONumber);
 610:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRG, GPIONumber);
 611:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 612:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 613:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_H:
 614:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined (STM32L496xx) || defined (STM32L4A6xx)
 615:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        SET_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
 616:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #else
 617:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        SET_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 720              		.loc 1 617 8 view .LVU148
 721 0078 064B     		ldr	r3, .L77
 722 007a DA6D     		ldr	r2, [r3, #92]
 723 007c 01F00B01 		and	r1, r1, #11
 724              	.LVL50:
 725              		.loc 1 617 8 is_stmt 0 view .LVU149
 726 0080 0A43     		orrs	r2, r2, r1
 727 0082 DA65     		str	r2, [r3, #92]
 618:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 619:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 728              		.loc 1 619 8 is_stmt 1 view .LVU150
 729 0084 9A6D     		ldr	r2, [r3, #88]
 730 0086 22EA0101 		bic	r1, r2, r1
 731 008a 9965     		str	r1, [r3, #88]
 620:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 732              		.loc 1 620 8 view .LVU151
 733 008c CCE7     		b	.L76
 734              	.LVL51:
 735              	.L75:
 570:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 736              		.loc 1 570 21 is_stmt 0 view .LVU152
 737 008e 0120     		movs	r0, #1
 738              	.LVL52:
 621:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(GPIOI)
 622:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_I:
 623:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        SET_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
 624:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PUCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
 625:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 626:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 627:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     default:
 628:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       status = HAL_ERROR;
 629:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       break;
 630:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
 631:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 632:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   return status;
 739              		.loc 1 632 3 is_stmt 1 view .LVU153
 633:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 740              		.loc 1 633 1 is_stmt 0 view .LVU154
 741 0090 7047     		bx	lr
 742              	.L78:
 743 0092 00BF     		.align	2
 744              	.L77:
 745 0094 00700040 		.word	1073770496
 746              		.cfi_endproc
 747              	.LFE319:
 749              		.section	.text.HAL_PWREx_DisableGPIOPullDown,"ax",%progbits
 750              		.align	1
 751              		.global	HAL_PWREx_DisableGPIOPullDown
 752              		.syntax unified
 753              		.thumb
 754              		.thumb_func
 755              		.fpu softvfp
 757              	HAL_PWREx_DisableGPIOPullDown:
 758              	.LVL53:
 759              	.LFB320:
 634:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 635:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 636:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 637:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Disable GPIO pull-down state in Standby and Shutdown modes.
 638:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  Reset the relevant PDy bits of PWR_PDCRx register used to configure the I/O
 639:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        in pull-down state in Standby and Shutdown modes.
 640:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  Even if a PDy bit to reset is reserved, the other PDy bits entered as input
 641:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        parameter at the same time are reset.
 642:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @param  GPIO: Specifies the IO port. This parameter can be PWR_GPIO_A..PWR_GPIO_H
 643:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         (or PWR_GPIO_I depending on the devices) to select the GPIO peripheral.
 644:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @param  GPIONumber: Specify the I/O pins numbers.
 645:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
 646:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         PWR_GPIO_BIT_0, ..., PWR_GPIO_BIT_15 (except for the port where less
 647:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         I/O pins are available) or the logical OR of several of them to reset
 648:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         several bits for a given port in a single API call.
 649:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval HAL Status
 650:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 651:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
 652:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 760              		.loc 1 652 1 is_stmt 1 view -0
 761              		.cfi_startproc
 762              		@ args = 0, pretend = 0, frame = 0
 763              		@ frame_needed = 0, uses_anonymous_args = 0
 764              		@ link register save eliminated.
 653:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 765              		.loc 1 653 3 view .LVU156
 654:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 655:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   assert_param(IS_PWR_GPIO(GPIO));
 766              		.loc 1 655 3 view .LVU157
 656:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));
 767              		.loc 1 656 3 view .LVU158
 657:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 658:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   switch (GPIO)
 768              		.loc 1 658 3 view .LVU159
 769 0000 0728     		cmp	r0, #7
 770 0002 30D8     		bhi	.L88
 771 0004 DFE800F0 		tbb	[pc, r0]
 772              	.L82:
 773 0008 04       		.byte	(.L87-.L82)/2
 774 0009 0D       		.byte	(.L86-.L82)/2
 775 000a 15       		.byte	(.L85-.L82)/2
 776 000b 1B       		.byte	(.L84-.L82)/2
 777 000c 21       		.byte	(.L83-.L82)/2
 778 000d 2F       		.byte	(.L88-.L82)/2
 779 000e 2F       		.byte	(.L88-.L82)/2
 780 000f 27       		.byte	(.L81-.L82)/2
 781              		.p2align 1
 782              	.L87:
 659:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 660:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_A:
 661:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRA, (GPIONumber & (~(PWR_GPIO_BIT_13|PWR_GPIO_BIT_15))));
 783              		.loc 1 661 8 view .LVU160
 784 0010 164A     		ldr	r2, .L90
 785 0012 536A     		ldr	r3, [r2, #36]
 786 0014 21F42041 		bic	r1, r1, #40960
 787              	.LVL54:
 788              		.loc 1 661 8 is_stmt 0 view .LVU161
 789 0018 23EA0101 		bic	r1, r3, r1
 790 001c 5162     		str	r1, [r2, #36]
 662:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 791              		.loc 1 662 8 is_stmt 1 view .LVU162
 792              	.L89:
 663:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_B:
 664:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRB, (GPIONumber & (~(PWR_GPIO_BIT_4))));
 665:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 793              		.loc 1 665 8 view .LVU163
 653:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 794              		.loc 1 653 21 is_stmt 0 view .LVU164
 795 001e 0020     		movs	r0, #0
 796              	.LVL55:
 797              		.loc 1 665 8 view .LVU165
 798 0020 7047     		bx	lr
 799              	.LVL56:
 800              	.L86:
 664:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 801              		.loc 1 664 8 is_stmt 1 view .LVU166
 802 0022 124A     		ldr	r2, .L90
 803 0024 D36A     		ldr	r3, [r2, #44]
 804 0026 21F01001 		bic	r1, r1, #16
 805              	.LVL57:
 664:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 806              		.loc 1 664 8 is_stmt 0 view .LVU167
 807 002a 23EA0101 		bic	r1, r3, r1
 808 002e D162     		str	r1, [r2, #44]
 809 0030 F5E7     		b	.L89
 810              	.LVL58:
 811              	.L85:
 666:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_C:
 667:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRC, GPIONumber);
 812              		.loc 1 667 8 is_stmt 1 view .LVU168
 813 0032 0E4A     		ldr	r2, .L90
 814 0034 536B     		ldr	r3, [r2, #52]
 815 0036 23EA0101 		bic	r1, r3, r1
 816              	.LVL59:
 817              		.loc 1 667 8 is_stmt 0 view .LVU169
 818 003a 5163     		str	r1, [r2, #52]
 668:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 819              		.loc 1 668 8 is_stmt 1 view .LVU170
 820 003c EFE7     		b	.L89
 821              	.LVL60:
 822              	.L84:
 669:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(GPIOD)
 670:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_D:
 671:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRD, GPIONumber);
 823              		.loc 1 671 8 view .LVU171
 824 003e 0B4A     		ldr	r2, .L90
 825 0040 D36B     		ldr	r3, [r2, #60]
 826 0042 23EA0101 		bic	r1, r3, r1
 827              	.LVL61:
 828              		.loc 1 671 8 is_stmt 0 view .LVU172
 829 0046 D163     		str	r1, [r2, #60]
 672:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 830              		.loc 1 672 8 is_stmt 1 view .LVU173
 831 0048 E9E7     		b	.L89
 832              	.LVL62:
 833              	.L83:
 673:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 674:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(GPIOE)
 675:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_E:
 676:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRE, GPIONumber);
 834              		.loc 1 676 8 view .LVU174
 835 004a 084A     		ldr	r2, .L90
 836 004c 536C     		ldr	r3, [r2, #68]
 837 004e 23EA0101 		bic	r1, r3, r1
 838              	.LVL63:
 839              		.loc 1 676 8 is_stmt 0 view .LVU175
 840 0052 5164     		str	r1, [r2, #68]
 677:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 841              		.loc 1 677 8 is_stmt 1 view .LVU176
 842 0054 E3E7     		b	.L89
 843              	.LVL64:
 844              	.L81:
 678:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 679:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(GPIOF)
 680:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_F:
 681:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRF, GPIONumber);
 682:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 683:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 684:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(GPIOG)
 685:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_G:
 686:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRG, GPIONumber);
 687:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 688:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 689:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_H:
 690:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined (STM32L496xx) || defined (STM32L4A6xx)
 691:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRH, ((GPIONumber & PWR_PORTH_AVAILABLE_PINS) & (~(PWR_GPIO_BIT_3))));
 692:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #else
 693:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRH, (GPIONumber & PWR_PORTH_AVAILABLE_PINS));
 845              		.loc 1 693 8 view .LVU177
 846 0056 054A     		ldr	r2, .L90
 847 0058 D36D     		ldr	r3, [r2, #92]
 848 005a 01F00B01 		and	r1, r1, #11
 849              	.LVL65:
 850              		.loc 1 693 8 is_stmt 0 view .LVU178
 851 005e 23EA0101 		bic	r1, r3, r1
 852 0062 D165     		str	r1, [r2, #92]
 694:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 695:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 853              		.loc 1 695 8 is_stmt 1 view .LVU179
 854 0064 DBE7     		b	.L89
 855              	.LVL66:
 856              	.L88:
 653:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 857              		.loc 1 653 21 is_stmt 0 view .LVU180
 858 0066 0120     		movs	r0, #1
 859              	.LVL67:
 696:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(GPIOI)
 697:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_GPIO_I:
 698:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        CLEAR_BIT(PWR->PDCRI, (GPIONumber & PWR_PORTI_AVAILABLE_PINS));
 699:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****        break;
 700:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
 701:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     default:
 702:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       status = HAL_ERROR;
 703:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       break;
 704:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
 705:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 706:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   return status;
 860              		.loc 1 706 3 is_stmt 1 view .LVU181
 707:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 861              		.loc 1 707 1 is_stmt 0 view .LVU182
 862 0068 7047     		bx	lr
 863              	.L91:
 864 006a 00BF     		.align	2
 865              	.L90:
 866 006c 00700040 		.word	1073770496
 867              		.cfi_endproc
 868              	.LFE320:
 870              		.section	.text.HAL_PWREx_EnablePullUpPullDownConfig,"ax",%progbits
 871              		.align	1
 872              		.global	HAL_PWREx_EnablePullUpPullDownConfig
 873              		.syntax unified
 874              		.thumb
 875              		.thumb_func
 876              		.fpu softvfp
 878              	HAL_PWREx_EnablePullUpPullDownConfig:
 879              	.LFB321:
 708:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 709:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 710:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 711:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 712:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enable pull-up and pull-down configuration.
 713:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  When APC bit is set, the I/O pull-up and pull-down configurations defined in
 714:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        PWR_PUCRx and PWR_PDCRx registers are applied in Standby and Shutdown modes.
 715:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  Pull-up set by PUy bit of PWR_PUCRx register is not activated if the corresponding
 716:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        PDy bit of PWR_PDCRx register is also set (pull-down configuration priority is higher).
 717:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        HAL_PWREx_EnableGPIOPullUp() and HAL_PWREx_EnableGPIOPullDown() API's ensure there
 718:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        is no conflict when setting PUy or PDy bit.
 719:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 720:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 721:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_EnablePullUpPullDownConfig(void)
 722:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 880              		.loc 1 722 1 is_stmt 1 view -0
 881              		.cfi_startproc
 882              		@ args = 0, pretend = 0, frame = 0
 883              		@ frame_needed = 0, uses_anonymous_args = 0
 884              		@ link register save eliminated.
 723:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR3, PWR_CR3_APC);
 885              		.loc 1 723 3 view .LVU184
 886 0000 024A     		ldr	r2, .L93
 887 0002 9368     		ldr	r3, [r2, #8]
 888 0004 43F48063 		orr	r3, r3, #1024
 889 0008 9360     		str	r3, [r2, #8]
 724:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 890              		.loc 1 724 1 is_stmt 0 view .LVU185
 891 000a 7047     		bx	lr
 892              	.L94:
 893              		.align	2
 894              	.L93:
 895 000c 00700040 		.word	1073770496
 896              		.cfi_endproc
 897              	.LFE321:
 899              		.section	.text.HAL_PWREx_DisablePullUpPullDownConfig,"ax",%progbits
 900              		.align	1
 901              		.global	HAL_PWREx_DisablePullUpPullDownConfig
 902              		.syntax unified
 903              		.thumb
 904              		.thumb_func
 905              		.fpu softvfp
 907              	HAL_PWREx_DisablePullUpPullDownConfig:
 908              	.LFB322:
 725:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 726:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 727:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 728:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Disable pull-up and pull-down configuration.
 729:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  When APC bit is cleared, the I/O pull-up and pull-down configurations defined in
 730:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        PWR_PUCRx and PWR_PDCRx registers are not applied in Standby and Shutdown modes.
 731:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 732:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 733:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_DisablePullUpPullDownConfig(void)
 734:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 909              		.loc 1 734 1 is_stmt 1 view -0
 910              		.cfi_startproc
 911              		@ args = 0, pretend = 0, frame = 0
 912              		@ frame_needed = 0, uses_anonymous_args = 0
 913              		@ link register save eliminated.
 735:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR3, PWR_CR3_APC);
 914              		.loc 1 735 3 view .LVU187
 915 0000 024A     		ldr	r2, .L96
 916 0002 9368     		ldr	r3, [r2, #8]
 917 0004 23F48063 		bic	r3, r3, #1024
 918 0008 9360     		str	r3, [r2, #8]
 736:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 919              		.loc 1 736 1 is_stmt 0 view .LVU188
 920 000a 7047     		bx	lr
 921              	.L97:
 922              		.align	2
 923              	.L96:
 924 000c 00700040 		.word	1073770496
 925              		.cfi_endproc
 926              	.LFE322:
 928              		.section	.text.HAL_PWREx_EnableSRAM2ContentRetention,"ax",%progbits
 929              		.align	1
 930              		.global	HAL_PWREx_EnableSRAM2ContentRetention
 931              		.syntax unified
 932              		.thumb
 933              		.thumb_func
 934              		.fpu softvfp
 936              	HAL_PWREx_EnableSRAM2ContentRetention:
 937              	.LFB323:
 737:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 738:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 739:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 740:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 741:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enable SRAM2 content retention in Standby mode.
 742:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  When RRS bit is set, SRAM2 is powered by the low-power regulator in
 743:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         Standby mode and its content is kept.
 744:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 745:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 746:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_EnableSRAM2ContentRetention(void)
 747:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 938              		.loc 1 747 1 is_stmt 1 view -0
 939              		.cfi_startproc
 940              		@ args = 0, pretend = 0, frame = 0
 941              		@ frame_needed = 0, uses_anonymous_args = 0
 942              		@ link register save eliminated.
 748:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR3, PWR_CR3_RRS);
 943              		.loc 1 748 3 view .LVU190
 944 0000 024A     		ldr	r2, .L99
 945 0002 9368     		ldr	r3, [r2, #8]
 946 0004 43F48073 		orr	r3, r3, #256
 947 0008 9360     		str	r3, [r2, #8]
 749:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 948              		.loc 1 749 1 is_stmt 0 view .LVU191
 949 000a 7047     		bx	lr
 950              	.L100:
 951              		.align	2
 952              	.L99:
 953 000c 00700040 		.word	1073770496
 954              		.cfi_endproc
 955              	.LFE323:
 957              		.section	.text.HAL_PWREx_DisableSRAM2ContentRetention,"ax",%progbits
 958              		.align	1
 959              		.global	HAL_PWREx_DisableSRAM2ContentRetention
 960              		.syntax unified
 961              		.thumb
 962              		.thumb_func
 963              		.fpu softvfp
 965              	HAL_PWREx_DisableSRAM2ContentRetention:
 966              	.LFB324:
 750:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 751:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 752:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 753:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Disable SRAM2 content retention in Standby mode.
 754:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  When RRS bit is reset, SRAM2 is powered off in Standby mode
 755:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        and its content is lost.
 756:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 757:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 758:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_DisableSRAM2ContentRetention(void)
 759:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 967              		.loc 1 759 1 is_stmt 1 view -0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 0
 970              		@ frame_needed = 0, uses_anonymous_args = 0
 971              		@ link register save eliminated.
 760:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR3, PWR_CR3_RRS);
 972              		.loc 1 760 3 view .LVU193
 973 0000 024A     		ldr	r2, .L102
 974 0002 9368     		ldr	r3, [r2, #8]
 975 0004 23F48073 		bic	r3, r3, #256
 976 0008 9360     		str	r3, [r2, #8]
 761:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 977              		.loc 1 761 1 is_stmt 0 view .LVU194
 978 000a 7047     		bx	lr
 979              	.L103:
 980              		.align	2
 981              	.L102:
 982 000c 00700040 		.word	1073770496
 983              		.cfi_endproc
 984              	.LFE324:
 986              		.section	.text.HAL_PWREx_EnablePVM1,"ax",%progbits
 987              		.align	1
 988              		.global	HAL_PWREx_EnablePVM1
 989              		.syntax unified
 990              		.thumb
 991              		.thumb_func
 992              		.fpu softvfp
 994              	HAL_PWREx_EnablePVM1:
 995              	.LFB325:
 762:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 763:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 764:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(PWR_CR3_EN_ULP)
 765:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 766:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enable Ultra Low Power BORL, BORH and PVD for STOP2 and Standby modes.
 767:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  All the other modes are not affected by this bit.
 768:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 769:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 770:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_EnableBORPVD_ULP(void)
 771:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 772:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR3, PWR_CR3_EN_ULP);
 773:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 774:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 775:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 776:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 777:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Disable Ultra Low Power BORL, BORH and PVD for STOP2 and Standby modes.
 778:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  All the other modes are not affected by this bit
 779:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 780:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 781:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_DisableBORPVD_ULP(void)
 782:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 783:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR3, PWR_CR3_EN_ULP);
 784:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 785:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif /* PWR_CR3_EN_ULP */
 786:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 787:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 788:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(PWR_CR4_EXT_SMPS_ON)
 789:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 790:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enable the CFLDO working @ 0.95V.
 791:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  When external SMPS is used & CFLDO operating in Range 2, the regulated voltage of the
 792:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        internal CFLDO can be reduced to 0.95V.
 793:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 794:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 795:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_EnableExtSMPS_0V95(void)
 796:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 797:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR4, PWR_CR4_EXT_SMPS_ON);
 798:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 799:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 800:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 801:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Disable the CFLDO working @ 0.95V
 802:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  Before SMPS is switched off, the regulated voltage of the
 803:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        internal CFLDO shall be set to 1.00V.
 804:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        1.00V. is also default operating Range 2 voltage.
 805:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 806:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 807:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_DisableExtSMPS_0V95(void)
 808:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 809:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR4, PWR_CR4_EXT_SMPS_ON);
 810:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 811:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif /* PWR_CR4_EXT_SMPS_ON */
 812:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 813:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 814:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(PWR_CR1_RRSTP)
 815:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 816:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enable SRAM3 content retention in Stop 2 mode.
 817:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  When RRSTP bit is set, SRAM3 is powered by the low-power regulator in
 818:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        Stop 2 mode and its content is kept.
 819:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 820:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 821:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_EnableSRAM3ContentRetention(void)
 822:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 823:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR1, PWR_CR1_RRSTP);
 824:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 825:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 826:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 827:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 828:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Disable SRAM3 content retention in Stop 2 mode.
 829:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  When RRSTP bit is reset, SRAM3 is powered off in Stop 2 mode
 830:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        and its content is lost.
 831:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 832:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 833:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_DisableSRAM3ContentRetention(void)
 834:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 835:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR1, PWR_CR1_RRSTP);
 836:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 837:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif /* PWR_CR1_RRSTP */
 838:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 839:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(PWR_CR3_DSIPDEN)
 840:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 841:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enable pull-down activation on DSI pins.
 842:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 843:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 844:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_EnableDSIPinsPDActivation(void)
 845:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 846:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR3, PWR_CR3_DSIPDEN);
 847:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 848:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 849:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 850:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 851:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Disable pull-down activation on DSI pins.
 852:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 853:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 854:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_DisableDSIPinsPDActivation(void)
 855:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 856:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR3, PWR_CR3_DSIPDEN);
 857:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 858:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif /* PWR_CR3_DSIPDEN */
 859:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 860:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(PWR_CR2_PVME1)
 861:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 862:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enable the Power Voltage Monitoring 1: VDDUSB versus 1.2V.
 863:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 864:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 865:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_EnablePVM1(void)
 866:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 996              		.loc 1 866 1 is_stmt 1 view -0
 997              		.cfi_startproc
 998              		@ args = 0, pretend = 0, frame = 0
 999              		@ frame_needed = 0, uses_anonymous_args = 0
 1000              		@ link register save eliminated.
 867:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR2, PWR_PVM_1);
 1001              		.loc 1 867 3 view .LVU196
 1002 0000 024A     		ldr	r2, .L105
 1003 0002 5368     		ldr	r3, [r2, #4]
 1004 0004 43F01003 		orr	r3, r3, #16
 1005 0008 5360     		str	r3, [r2, #4]
 868:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 1006              		.loc 1 868 1 is_stmt 0 view .LVU197
 1007 000a 7047     		bx	lr
 1008              	.L106:
 1009              		.align	2
 1010              	.L105:
 1011 000c 00700040 		.word	1073770496
 1012              		.cfi_endproc
 1013              	.LFE325:
 1015              		.section	.text.HAL_PWREx_DisablePVM1,"ax",%progbits
 1016              		.align	1
 1017              		.global	HAL_PWREx_DisablePVM1
 1018              		.syntax unified
 1019              		.thumb
 1020              		.thumb_func
 1021              		.fpu softvfp
 1023              	HAL_PWREx_DisablePVM1:
 1024              	.LFB326:
 869:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 870:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 871:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Disable the Power Voltage Monitoring 1: VDDUSB versus 1.2V.
 872:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 873:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 874:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_DisablePVM1(void)
 875:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 1025              		.loc 1 875 1 is_stmt 1 view -0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 1029              		@ link register save eliminated.
 876:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR2, PWR_PVM_1);
 1030              		.loc 1 876 3 view .LVU199
 1031 0000 024A     		ldr	r2, .L108
 1032 0002 5368     		ldr	r3, [r2, #4]
 1033 0004 23F01003 		bic	r3, r3, #16
 1034 0008 5360     		str	r3, [r2, #4]
 877:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 1035              		.loc 1 877 1 is_stmt 0 view .LVU200
 1036 000a 7047     		bx	lr
 1037              	.L109:
 1038              		.align	2
 1039              	.L108:
 1040 000c 00700040 		.word	1073770496
 1041              		.cfi_endproc
 1042              	.LFE326:
 1044              		.section	.text.HAL_PWREx_EnablePVM3,"ax",%progbits
 1045              		.align	1
 1046              		.global	HAL_PWREx_EnablePVM3
 1047              		.syntax unified
 1048              		.thumb
 1049              		.thumb_func
 1050              		.fpu softvfp
 1052              	HAL_PWREx_EnablePVM3:
 1053              	.LFB327:
 878:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif /* PWR_CR2_PVME1 */
 879:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 880:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 881:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(PWR_CR2_PVME2)
 882:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 883:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enable the Power Voltage Monitoring 2: VDDIO2 versus 0.9V.
 884:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 885:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 886:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_EnablePVM2(void)
 887:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 888:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR2, PWR_PVM_2);
 889:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 890:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 891:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 892:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Disable the Power Voltage Monitoring 2: VDDIO2 versus 0.9V.
 893:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 894:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 895:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_DisablePVM2(void)
 896:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 897:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR2, PWR_PVM_2);
 898:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 899:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif /* PWR_CR2_PVME2 */
 900:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 901:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 902:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 903:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enable the Power Voltage Monitoring 3: VDDA versus 1.62V.
 904:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 905:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 906:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_EnablePVM3(void)
 907:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 1054              		.loc 1 907 1 is_stmt 1 view -0
 1055              		.cfi_startproc
 1056              		@ args = 0, pretend = 0, frame = 0
 1057              		@ frame_needed = 0, uses_anonymous_args = 0
 1058              		@ link register save eliminated.
 908:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR2, PWR_PVM_3);
 1059              		.loc 1 908 3 view .LVU202
 1060 0000 024A     		ldr	r2, .L111
 1061 0002 5368     		ldr	r3, [r2, #4]
 1062 0004 43F04003 		orr	r3, r3, #64
 1063 0008 5360     		str	r3, [r2, #4]
 909:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 1064              		.loc 1 909 1 is_stmt 0 view .LVU203
 1065 000a 7047     		bx	lr
 1066              	.L112:
 1067              		.align	2
 1068              	.L111:
 1069 000c 00700040 		.word	1073770496
 1070              		.cfi_endproc
 1071              	.LFE327:
 1073              		.section	.text.HAL_PWREx_DisablePVM3,"ax",%progbits
 1074              		.align	1
 1075              		.global	HAL_PWREx_DisablePVM3
 1076              		.syntax unified
 1077              		.thumb
 1078              		.thumb_func
 1079              		.fpu softvfp
 1081              	HAL_PWREx_DisablePVM3:
 1082              	.LFB328:
 910:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 911:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 912:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Disable the Power Voltage Monitoring 3: VDDA versus 1.62V.
 913:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 914:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 915:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_DisablePVM3(void)
 916:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 1083              		.loc 1 916 1 is_stmt 1 view -0
 1084              		.cfi_startproc
 1085              		@ args = 0, pretend = 0, frame = 0
 1086              		@ frame_needed = 0, uses_anonymous_args = 0
 1087              		@ link register save eliminated.
 917:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR2, PWR_PVM_3);
 1088              		.loc 1 917 3 view .LVU205
 1089 0000 024A     		ldr	r2, .L114
 1090 0002 5368     		ldr	r3, [r2, #4]
 1091 0004 23F04003 		bic	r3, r3, #64
 1092 0008 5360     		str	r3, [r2, #4]
 918:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 1093              		.loc 1 918 1 is_stmt 0 view .LVU206
 1094 000a 7047     		bx	lr
 1095              	.L115:
 1096              		.align	2
 1097              	.L114:
 1098 000c 00700040 		.word	1073770496
 1099              		.cfi_endproc
 1100              	.LFE328:
 1102              		.section	.text.HAL_PWREx_EnablePVM4,"ax",%progbits
 1103              		.align	1
 1104              		.global	HAL_PWREx_EnablePVM4
 1105              		.syntax unified
 1106              		.thumb
 1107              		.thumb_func
 1108              		.fpu softvfp
 1110              	HAL_PWREx_EnablePVM4:
 1111              	.LFB329:
 919:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 920:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 921:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 922:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enable the Power Voltage Monitoring 4:  VDDA versus 2.2V.
 923:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 924:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 925:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_EnablePVM4(void)
 926:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 1112              		.loc 1 926 1 is_stmt 1 view -0
 1113              		.cfi_startproc
 1114              		@ args = 0, pretend = 0, frame = 0
 1115              		@ frame_needed = 0, uses_anonymous_args = 0
 1116              		@ link register save eliminated.
 927:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR2, PWR_PVM_4);
 1117              		.loc 1 927 3 view .LVU208
 1118 0000 024A     		ldr	r2, .L117
 1119 0002 5368     		ldr	r3, [r2, #4]
 1120 0004 43F08003 		orr	r3, r3, #128
 1121 0008 5360     		str	r3, [r2, #4]
 928:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 1122              		.loc 1 928 1 is_stmt 0 view .LVU209
 1123 000a 7047     		bx	lr
 1124              	.L118:
 1125              		.align	2
 1126              	.L117:
 1127 000c 00700040 		.word	1073770496
 1128              		.cfi_endproc
 1129              	.LFE329:
 1131              		.section	.text.HAL_PWREx_DisablePVM4,"ax",%progbits
 1132              		.align	1
 1133              		.global	HAL_PWREx_DisablePVM4
 1134              		.syntax unified
 1135              		.thumb
 1136              		.thumb_func
 1137              		.fpu softvfp
 1139              	HAL_PWREx_DisablePVM4:
 1140              	.LFB330:
 929:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 930:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 931:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Disable the Power Voltage Monitoring 4:  VDDA versus 2.2V.
 932:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
 933:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 934:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_DisablePVM4(void)
 935:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 1141              		.loc 1 935 1 is_stmt 1 view -0
 1142              		.cfi_startproc
 1143              		@ args = 0, pretend = 0, frame = 0
 1144              		@ frame_needed = 0, uses_anonymous_args = 0
 1145              		@ link register save eliminated.
 936:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR2, PWR_PVM_4);
 1146              		.loc 1 936 3 view .LVU211
 1147 0000 024A     		ldr	r2, .L120
 1148 0002 5368     		ldr	r3, [r2, #4]
 1149 0004 23F08003 		bic	r3, r3, #128
 1150 0008 5360     		str	r3, [r2, #4]
 937:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 1151              		.loc 1 937 1 is_stmt 0 view .LVU212
 1152 000a 7047     		bx	lr
 1153              	.L121:
 1154              		.align	2
 1155              	.L120:
 1156 000c 00700040 		.word	1073770496
 1157              		.cfi_endproc
 1158              	.LFE330:
 1160              		.section	.text.HAL_PWREx_ConfigPVM,"ax",%progbits
 1161              		.align	1
 1162              		.global	HAL_PWREx_ConfigPVM
 1163              		.syntax unified
 1164              		.thumb
 1165              		.thumb_func
 1166              		.fpu softvfp
 1168              	HAL_PWREx_ConfigPVM:
 1169              	.LVL68:
 1170              	.LFB331:
 938:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 939:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 940:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 941:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 942:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
 943:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Configure the Peripheral Voltage Monitoring (PVM).
 944:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @param sConfigPVM: pointer to a PWR_PVMTypeDef structure that contains the
 945:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        PVM configuration information.
 946:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note The API configures a single PVM according to the information contained
 947:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *       in the input structure. To configure several PVMs, the API must be singly
 948:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *       called for each PVM used.
 949:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note Refer to the electrical characteristics of your device datasheet for
 950:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         more details about the voltage thresholds corresponding to each
 951:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         detection level and to each monitored supply.
 952:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval HAL status
 953:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
 954:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ConfigPVM(PWR_PVMTypeDef *sConfigPVM)
 955:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 1171              		.loc 1 955 1 is_stmt 1 view -0
 1172              		.cfi_startproc
 1173              		@ args = 0, pretend = 0, frame = 0
 1174              		@ frame_needed = 0, uses_anonymous_args = 0
 1175              		@ link register save eliminated.
 956:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
 1176              		.loc 1 956 3 view .LVU214
 957:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 958:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Check the parameters */
 959:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   assert_param(IS_PWR_PVM_TYPE(sConfigPVM->PVMType));
 1177              		.loc 1 959 3 view .LVU215
 960:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   assert_param(IS_PWR_PVM_MODE(sConfigPVM->Mode));
 1178              		.loc 1 960 3 view .LVU216
 961:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 962:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 963:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Configure EXTI 35 to 38 interrupts if so required:
 964:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****      scan thru PVMType to detect which PVMx is set and
 965:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****      configure the corresponding EXTI line accordingly. */
 966:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   switch (sConfigPVM->PVMType)
 1179              		.loc 1 966 3 view .LVU217
 1180              		.loc 1 966 21 is_stmt 0 view .LVU218
 1181 0000 0368     		ldr	r3, [r0]
 1182              		.loc 1 966 3 view .LVU219
 1183 0002 402B     		cmp	r3, #64
 1184 0004 31D0     		beq	.L123
 1185 0006 802B     		cmp	r3, #128
 1186 0008 59D0     		beq	.L124
 1187 000a 102B     		cmp	r3, #16
 1188 000c 40F08180 		bne	.L137
 967:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 968:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(PWR_CR2_PVME1)
 969:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_PVM_1:
 970:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Clear any previous config. Keep it clear if no event or IT mode is selected */
 971:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       __HAL_PWR_PVM1_EXTI_DISABLE_EVENT();
 1189              		.loc 1 971 7 is_stmt 1 view .LVU220
 1190 0010 414B     		ldr	r3, .L173
 1191 0012 5A6A     		ldr	r2, [r3, #36]
 1192 0014 22F00802 		bic	r2, r2, #8
 1193 0018 5A62     		str	r2, [r3, #36]
 972:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       __HAL_PWR_PVM1_EXTI_DISABLE_IT();
 1194              		.loc 1 972 7 view .LVU221
 1195 001a 1A6A     		ldr	r2, [r3, #32]
 1196 001c 22F00802 		bic	r2, r2, #8
 1197 0020 1A62     		str	r2, [r3, #32]
 973:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       __HAL_PWR_PVM1_EXTI_DISABLE_FALLING_EDGE();
 1198              		.loc 1 973 7 view .LVU222
 1199 0022 DA6A     		ldr	r2, [r3, #44]
 1200 0024 22F00802 		bic	r2, r2, #8
 1201 0028 DA62     		str	r2, [r3, #44]
 974:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       __HAL_PWR_PVM1_EXTI_DISABLE_RISING_EDGE();
 1202              		.loc 1 974 7 view .LVU223
 1203 002a 9A6A     		ldr	r2, [r3, #40]
 1204 002c 22F00802 		bic	r2, r2, #8
 1205 0030 9A62     		str	r2, [r3, #40]
 975:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 976:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Configure interrupt mode */
 977:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 1206              		.loc 1 977 7 view .LVU224
 1207              		.loc 1 977 21 is_stmt 0 view .LVU225
 1208 0032 4268     		ldr	r2, [r0, #4]
 1209              		.loc 1 977 9 view .LVU226
 1210 0034 D103     		lsls	r1, r2, #15
 978:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
 979:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         __HAL_PWR_PVM1_EXTI_ENABLE_IT();
 1211              		.loc 1 979 9 is_stmt 1 view .LVU227
 1212 0036 42BF     		ittt	mi
 1213 0038 196A     		ldrmi	r1, [r3, #32]
 1214 003a 41F00801 		orrmi	r1, r1, #8
 1215 003e 1962     		strmi	r1, [r3, #32]
 980:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
 981:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 982:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Configure event mode */
 983:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 1216              		.loc 1 983 7 view .LVU228
 1217              		.loc 1 983 9 is_stmt 0 view .LVU229
 1218 0040 9003     		lsls	r0, r2, #14
 1219              	.LVL69:
 984:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
 985:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         __HAL_PWR_PVM1_EXTI_ENABLE_EVENT();
 1220              		.loc 1 985 9 is_stmt 1 view .LVU230
 1221 0042 42BF     		ittt	mi
 1222 0044 596A     		ldrmi	r1, [r3, #36]
 1223 0046 41F00801 		orrmi	r1, r1, #8
 1224 004a 5962     		strmi	r1, [r3, #36]
 986:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
 987:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 988:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Configure the edge */
 989:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 1225              		.loc 1 989 7 view .LVU231
 1226              		.loc 1 989 9 is_stmt 0 view .LVU232
 1227 004c D107     		lsls	r1, r2, #31
 990:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
 991:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         __HAL_PWR_PVM1_EXTI_ENABLE_RISING_EDGE();
 1228              		.loc 1 991 9 is_stmt 1 view .LVU233
 1229 004e 42BF     		ittt	mi
 1230 0050 996A     		ldrmi	r1, [r3, #40]
 1231 0052 41F00801 		orrmi	r1, r1, #8
 1232 0056 9962     		strmi	r1, [r3, #40]
 992:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
 993:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 994:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 1233              		.loc 1 994 7 view .LVU234
 1234              		.loc 1 994 9 is_stmt 0 view .LVU235
 1235 0058 9007     		lsls	r0, r2, #30
 1236 005a 01D4     		bmi	.L129
 1237              	.L171:
 956:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 1238              		.loc 1 956 21 view .LVU236
 1239 005c 0020     		movs	r0, #0
 1240 005e 7047     		bx	lr
 1241              	.L129:
 995:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
 996:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         __HAL_PWR_PVM1_EXTI_ENABLE_FALLING_EDGE();
 1242              		.loc 1 996 9 is_stmt 1 view .LVU237
 1243 0060 DA6A     		ldr	r2, [r3, #44]
 1244 0062 42F00802 		orr	r2, r2, #8
 1245              	.L172:
 1246 0066 DA62     		str	r2, [r3, #44]
 1247 0068 F8E7     		b	.L171
 1248              	.LVL70:
 1249              	.L123:
 997:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
 998:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       break;
 999:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif /* PWR_CR2_PVME1 */
1000:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1001:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(PWR_CR2_PVME2)
1002:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_PVM_2:
1003:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Clear any previous config. Keep it clear if no event or IT mode is selected */
1004:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       __HAL_PWR_PVM2_EXTI_DISABLE_EVENT();
1005:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       __HAL_PWR_PVM2_EXTI_DISABLE_IT();
1006:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       __HAL_PWR_PVM2_EXTI_DISABLE_FALLING_EDGE();
1007:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       __HAL_PWR_PVM2_EXTI_DISABLE_RISING_EDGE();
1008:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1009:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Configure interrupt mode */
1010:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
1011:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
1012:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         __HAL_PWR_PVM2_EXTI_ENABLE_IT();
1013:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
1014:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1015:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Configure event mode */
1016:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
1017:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
1018:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         __HAL_PWR_PVM2_EXTI_ENABLE_EVENT();
1019:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
1020:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1021:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Configure the edge */
1022:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
1023:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
1024:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         __HAL_PWR_PVM2_EXTI_ENABLE_RISING_EDGE();
1025:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
1026:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1027:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
1028:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
1029:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         __HAL_PWR_PVM2_EXTI_ENABLE_FALLING_EDGE();
1030:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
1031:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       break;
1032:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif /* PWR_CR2_PVME2 */
1033:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1034:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_PVM_3:
1035:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Clear any previous config. Keep it clear if no event or IT mode is selected */
1036:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       __HAL_PWR_PVM3_EXTI_DISABLE_EVENT();
 1250              		.loc 1 1036 7 view .LVU238
 1251 006a 2B4B     		ldr	r3, .L173
 1252 006c 5A6A     		ldr	r2, [r3, #36]
 1253 006e 22F02002 		bic	r2, r2, #32
 1254 0072 5A62     		str	r2, [r3, #36]
1037:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       __HAL_PWR_PVM3_EXTI_DISABLE_IT();
 1255              		.loc 1 1037 7 view .LVU239
 1256 0074 1A6A     		ldr	r2, [r3, #32]
 1257 0076 22F02002 		bic	r2, r2, #32
 1258 007a 1A62     		str	r2, [r3, #32]
1038:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       __HAL_PWR_PVM3_EXTI_DISABLE_FALLING_EDGE();
 1259              		.loc 1 1038 7 view .LVU240
 1260 007c DA6A     		ldr	r2, [r3, #44]
 1261 007e 22F02002 		bic	r2, r2, #32
 1262 0082 DA62     		str	r2, [r3, #44]
1039:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       __HAL_PWR_PVM3_EXTI_DISABLE_RISING_EDGE();
 1263              		.loc 1 1039 7 view .LVU241
 1264 0084 9A6A     		ldr	r2, [r3, #40]
 1265 0086 22F02002 		bic	r2, r2, #32
 1266 008a 9A62     		str	r2, [r3, #40]
1040:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1041:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Configure interrupt mode */
1042:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 1267              		.loc 1 1042 7 view .LVU242
 1268              		.loc 1 1042 21 is_stmt 0 view .LVU243
 1269 008c 4268     		ldr	r2, [r0, #4]
 1270              		.loc 1 1042 9 view .LVU244
 1271 008e D103     		lsls	r1, r2, #15
1043:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
1044:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         __HAL_PWR_PVM3_EXTI_ENABLE_IT();
 1272              		.loc 1 1044 9 is_stmt 1 view .LVU245
 1273 0090 42BF     		ittt	mi
 1274 0092 196A     		ldrmi	r1, [r3, #32]
 1275 0094 41F02001 		orrmi	r1, r1, #32
 1276 0098 1962     		strmi	r1, [r3, #32]
1045:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
1046:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1047:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Configure event mode */
1048:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 1277              		.loc 1 1048 7 view .LVU246
 1278              		.loc 1 1048 9 is_stmt 0 view .LVU247
 1279 009a 9003     		lsls	r0, r2, #14
 1280              	.LVL71:
1049:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
1050:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         __HAL_PWR_PVM3_EXTI_ENABLE_EVENT();
 1281              		.loc 1 1050 9 is_stmt 1 view .LVU248
 1282 009c 42BF     		ittt	mi
 1283 009e 596A     		ldrmi	r1, [r3, #36]
 1284 00a0 41F02001 		orrmi	r1, r1, #32
 1285 00a4 5962     		strmi	r1, [r3, #36]
1051:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
1052:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1053:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Configure the edge */
1054:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 1286              		.loc 1 1054 7 view .LVU249
 1287              		.loc 1 1054 9 is_stmt 0 view .LVU250
 1288 00a6 D107     		lsls	r1, r2, #31
1055:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
1056:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         __HAL_PWR_PVM3_EXTI_ENABLE_RISING_EDGE();
 1289              		.loc 1 1056 9 is_stmt 1 view .LVU251
 1290 00a8 42BF     		ittt	mi
 1291 00aa 996A     		ldrmi	r1, [r3, #40]
 1292 00ac 41F02001 		orrmi	r1, r1, #32
 1293 00b0 9962     		strmi	r1, [r3, #40]
1057:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
1058:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1059:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 1294              		.loc 1 1059 7 view .LVU252
 1295              		.loc 1 1059 9 is_stmt 0 view .LVU253
 1296 00b2 9007     		lsls	r0, r2, #30
 1297 00b4 D2D5     		bpl	.L171
1060:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
1061:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         __HAL_PWR_PVM3_EXTI_ENABLE_FALLING_EDGE();
 1298              		.loc 1 1061 9 is_stmt 1 view .LVU254
 1299 00b6 DA6A     		ldr	r2, [r3, #44]
 1300 00b8 42F02002 		orr	r2, r2, #32
 1301 00bc D3E7     		b	.L172
 1302              	.LVL72:
 1303              	.L124:
1062:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
1063:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       break;
1064:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1065:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     case PWR_PVM_4:
1066:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Clear any previous config. Keep it clear if no event or IT mode is selected */
1067:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       __HAL_PWR_PVM4_EXTI_DISABLE_EVENT();
 1304              		.loc 1 1067 7 view .LVU255
 1305 00be 164B     		ldr	r3, .L173
 1306 00c0 5A6A     		ldr	r2, [r3, #36]
 1307 00c2 22F04002 		bic	r2, r2, #64
 1308 00c6 5A62     		str	r2, [r3, #36]
1068:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       __HAL_PWR_PVM4_EXTI_DISABLE_IT();
 1309              		.loc 1 1068 7 view .LVU256
 1310 00c8 1A6A     		ldr	r2, [r3, #32]
 1311 00ca 22F04002 		bic	r2, r2, #64
 1312 00ce 1A62     		str	r2, [r3, #32]
1069:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       __HAL_PWR_PVM4_EXTI_DISABLE_FALLING_EDGE();
 1313              		.loc 1 1069 7 view .LVU257
 1314 00d0 DA6A     		ldr	r2, [r3, #44]
 1315 00d2 22F04002 		bic	r2, r2, #64
 1316 00d6 DA62     		str	r2, [r3, #44]
1070:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       __HAL_PWR_PVM4_EXTI_DISABLE_RISING_EDGE();
 1317              		.loc 1 1070 7 view .LVU258
 1318 00d8 9A6A     		ldr	r2, [r3, #40]
 1319 00da 22F04002 		bic	r2, r2, #64
 1320 00de 9A62     		str	r2, [r3, #40]
1071:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1072:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Configure interrupt mode */
1073:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       if((sConfigPVM->Mode & PVM_MODE_IT) == PVM_MODE_IT)
 1321              		.loc 1 1073 7 view .LVU259
 1322              		.loc 1 1073 21 is_stmt 0 view .LVU260
 1323 00e0 4268     		ldr	r2, [r0, #4]
 1324              		.loc 1 1073 9 view .LVU261
 1325 00e2 D103     		lsls	r1, r2, #15
1074:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
1075:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         __HAL_PWR_PVM4_EXTI_ENABLE_IT();
 1326              		.loc 1 1075 9 is_stmt 1 view .LVU262
 1327 00e4 42BF     		ittt	mi
 1328 00e6 196A     		ldrmi	r1, [r3, #32]
 1329 00e8 41F04001 		orrmi	r1, r1, #64
 1330 00ec 1962     		strmi	r1, [r3, #32]
1076:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
1077:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1078:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Configure event mode */
1079:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       if((sConfigPVM->Mode & PVM_MODE_EVT) == PVM_MODE_EVT)
 1331              		.loc 1 1079 7 view .LVU263
 1332              		.loc 1 1079 9 is_stmt 0 view .LVU264
 1333 00ee 9003     		lsls	r0, r2, #14
 1334              	.LVL73:
1080:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
1081:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         __HAL_PWR_PVM4_EXTI_ENABLE_EVENT();
 1335              		.loc 1 1081 9 is_stmt 1 view .LVU265
 1336 00f0 42BF     		ittt	mi
 1337 00f2 596A     		ldrmi	r1, [r3, #36]
 1338 00f4 41F04001 		orrmi	r1, r1, #64
 1339 00f8 5962     		strmi	r1, [r3, #36]
1082:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
1083:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1084:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       /* Configure the edge */
1085:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       if((sConfigPVM->Mode & PVM_RISING_EDGE) == PVM_RISING_EDGE)
 1340              		.loc 1 1085 7 view .LVU266
 1341              		.loc 1 1085 9 is_stmt 0 view .LVU267
 1342 00fa D107     		lsls	r1, r2, #31
1086:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
1087:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         __HAL_PWR_PVM4_EXTI_ENABLE_RISING_EDGE();
 1343              		.loc 1 1087 9 is_stmt 1 view .LVU268
 1344 00fc 42BF     		ittt	mi
 1345 00fe 996A     		ldrmi	r1, [r3, #40]
 1346 0100 41F04001 		orrmi	r1, r1, #64
 1347 0104 9962     		strmi	r1, [r3, #40]
1088:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
1089:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1090:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       if((sConfigPVM->Mode & PVM_FALLING_EDGE) == PVM_FALLING_EDGE)
 1348              		.loc 1 1090 7 view .LVU269
 1349              		.loc 1 1090 9 is_stmt 0 view .LVU270
 1350 0106 9207     		lsls	r2, r2, #30
 1351 0108 A8D5     		bpl	.L171
1091:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       {
1092:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****         __HAL_PWR_PVM4_EXTI_ENABLE_FALLING_EDGE();
 1352              		.loc 1 1092 9 is_stmt 1 view .LVU271
 1353 010a DA6A     		ldr	r2, [r3, #44]
 1354 010c 42F04002 		orr	r2, r2, #64
 1355 0110 A9E7     		b	.L172
 1356              	.LVL74:
 1357              	.L137:
 966:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 1358              		.loc 1 966 3 is_stmt 0 view .LVU272
 1359 0112 0120     		movs	r0, #1
 1360              	.LVL75:
1093:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       }
1094:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       break;
1095:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1096:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     default:
1097:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       status = HAL_ERROR;
1098:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****       break;
1099:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
1100:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1101:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   return status;
 1361              		.loc 1 1101 3 is_stmt 1 view .LVU273
1102:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 1362              		.loc 1 1102 1 is_stmt 0 view .LVU274
 1363 0114 7047     		bx	lr
 1364              	.L174:
 1365 0116 00BF     		.align	2
 1366              	.L173:
 1367 0118 00040140 		.word	1073808384
 1368              		.cfi_endproc
 1369              	.LFE331:
 1371              		.section	.text.HAL_PWREx_EnableLowPowerRunMode,"ax",%progbits
 1372              		.align	1
 1373              		.global	HAL_PWREx_EnableLowPowerRunMode
 1374              		.syntax unified
 1375              		.thumb
 1376              		.thumb_func
 1377              		.fpu softvfp
 1379              	HAL_PWREx_EnableLowPowerRunMode:
 1380              	.LFB332:
1103:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1104:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1105:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1106:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
1107:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enter Low-power Run mode
1108:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
1109:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  When Regulator is set to PWR_LOWPOWERREGULATOR_ON, the user can optionally configure the
1110:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        Flash in power-down monde in setting the RUN_PD bit in FLASH_ACR register.
1111:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        Additionally, the clock frequency must be reduced below 2 MHz.
1112:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
1113:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
1114:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
1115:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
1116:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_EnableLowPowerRunMode(void)
1117:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 1381              		.loc 1 1117 1 is_stmt 1 view -0
 1382              		.cfi_startproc
 1383              		@ args = 0, pretend = 0, frame = 0
 1384              		@ frame_needed = 0, uses_anonymous_args = 0
 1385              		@ link register save eliminated.
1118:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Set Regulator parameter */
1119:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   SET_BIT(PWR->CR1, PWR_CR1_LPR);
 1386              		.loc 1 1119 3 view .LVU276
 1387 0000 024A     		ldr	r2, .L176
 1388 0002 1368     		ldr	r3, [r2]
 1389 0004 43F48043 		orr	r3, r3, #16384
 1390 0008 1360     		str	r3, [r2]
1120:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 1391              		.loc 1 1120 1 is_stmt 0 view .LVU277
 1392 000a 7047     		bx	lr
 1393              	.L177:
 1394              		.align	2
 1395              	.L176:
 1396 000c 00700040 		.word	1073770496
 1397              		.cfi_endproc
 1398              	.LFE332:
 1400              		.section	.text.HAL_PWREx_DisableLowPowerRunMode,"ax",%progbits
 1401              		.align	1
 1402              		.global	HAL_PWREx_DisableLowPowerRunMode
 1403              		.syntax unified
 1404              		.thumb
 1405              		.thumb_func
 1406              		.fpu softvfp
 1408              	HAL_PWREx_DisableLowPowerRunMode:
 1409              	.LFB333:
1121:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1122:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1123:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
1124:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Exit Low-power Run mode.
1125:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  Before HAL_PWREx_DisableLowPowerRunMode() completion, the function checks that
1126:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        REGLPF has been properly reset (otherwise, HAL_PWREx_DisableLowPowerRunMode
1127:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        returns HAL_TIMEOUT status). The system clock frequency can then be
1128:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        increased above 2 MHz.
1129:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval HAL Status
1130:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
1131:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
1132:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 1410              		.loc 1 1132 1 is_stmt 1 view -0
 1411              		.cfi_startproc
 1412              		@ args = 0, pretend = 0, frame = 0
 1413              		@ frame_needed = 0, uses_anonymous_args = 0
 1414              		@ link register save eliminated.
1133:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   uint32_t wait_loop_index;
 1415              		.loc 1 1133 3 view .LVU279
1134:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1135:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Clear LPR bit */
1136:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 1416              		.loc 1 1136 3 view .LVU280
 1417 0000 0D4A     		ldr	r2, .L187
 1418 0002 1368     		ldr	r3, [r2]
 1419 0004 23F48043 		bic	r3, r3, #16384
 1420 0008 1360     		str	r3, [r2]
1137:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1138:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Wait until REGLPF is reset */
1139:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 1421              		.loc 1 1139 3 view .LVU281
 1422              		.loc 1 1139 49 is_stmt 0 view .LVU282
 1423 000a 0C4B     		ldr	r3, .L187+4
 1424 000c 1968     		ldr	r1, [r3]
 1425 000e 3223     		movs	r3, #50
 1426 0010 4B43     		muls	r3, r1, r3
 1427              		.loc 1 1139 68 view .LVU283
 1428 0012 0B49     		ldr	r1, .L187+8
 1429 0014 B3FBF1F3 		udiv	r3, r3, r1
 1430 0018 1146     		mov	r1, r2
 1431              		.loc 1 1139 19 view .LVU284
 1432 001a 0133     		adds	r3, r3, #1
 1433              	.LVL76:
1140:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 1434              		.loc 1 1140 3 is_stmt 1 view .LVU285
 1435              	.L179:
 1436              		.loc 1 1140 9 view .LVU286
 1437              		.loc 1 1140 11 is_stmt 0 view .LVU287
 1438 001c 5069     		ldr	r0, [r2, #20]
 1439              		.loc 1 1140 9 view .LVU288
 1440 001e 10F4007F 		tst	r0, #512
 1441 0022 00D0     		beq	.L180
 1442              		.loc 1 1140 53 discriminator 1 view .LVU289
 1443 0024 33B9     		cbnz	r3, .L181
 1444              	.L180:
1141:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
1142:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     wait_loop_index--;
1143:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
1144:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 1445              		.loc 1 1144 3 is_stmt 1 view .LVU290
 1446              		.loc 1 1144 7 is_stmt 0 view .LVU291
 1447 0026 4B69     		ldr	r3, [r1, #20]
 1448              	.LVL77:
1145:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
1146:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     return HAL_TIMEOUT;
 1449              		.loc 1 1146 12 view .LVU292
 1450 0028 13F4007F 		tst	r3, #512
1147:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
1148:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1149:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   return HAL_OK;
1150:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 1451              		.loc 1 1150 1 view .LVU293
 1452 002c 14BF     		ite	ne
 1453 002e 0320     		movne	r0, #3
 1454 0030 0020     		moveq	r0, #0
 1455 0032 7047     		bx	lr
 1456              	.LVL78:
 1457              	.L181:
1142:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
 1458              		.loc 1 1142 5 is_stmt 1 view .LVU294
1142:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
 1459              		.loc 1 1142 20 is_stmt 0 view .LVU295
 1460 0034 013B     		subs	r3, r3, #1
 1461              	.LVL79:
1142:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
 1462              		.loc 1 1142 20 view .LVU296
 1463 0036 F1E7     		b	.L179
 1464              	.L188:
 1465              		.align	2
 1466              	.L187:
 1467 0038 00700040 		.word	1073770496
 1468 003c 00000000 		.word	SystemCoreClock
 1469 0040 40420F00 		.word	1000000
 1470              		.cfi_endproc
 1471              	.LFE333:
 1473              		.section	.text.HAL_PWREx_EnterSTOP0Mode,"ax",%progbits
 1474              		.align	1
 1475              		.global	HAL_PWREx_EnterSTOP0Mode
 1476              		.syntax unified
 1477              		.thumb
 1478              		.thumb_func
 1479              		.fpu softvfp
 1481              	HAL_PWREx_EnterSTOP0Mode:
 1482              	.LVL80:
 1483              	.LFB334:
1151:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1152:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1153:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
1154:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enter Stop 0 mode.
1155:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  In Stop 0 mode, main and low voltage regulators are ON.
1156:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  In Stop 0 mode, all I/O pins keep the same state as in Run mode.
1157:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  All clocks in the VCORE domain are stopped; the PLL, the MSI,
1158:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        the HSI and the HSE oscillators are disabled. Some peripherals with the wakeup capabilit
1159:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        (I2Cx, USARTx and LPUART) can switch on the HSI to receive a frame, and switch off the H
1160:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        after receiving the frame if it is not a wakeup frame. In this case, the HSI clock is pr
1161:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        only to the peripheral requesting it.
1162:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        SRAM1, SRAM2 and register contents are preserved.
1163:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        The BOR is available.
1164:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  When exiting Stop 0 mode by issuing an interrupt or a wakeup event,
1165:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         the HSI RC oscillator is selected as system clock if STOPWUCK bit in RCC_CFGR register
1166:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         is set; the MSI oscillator is selected if STOPWUCK is cleared.
1167:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  By keeping the internal regulator ON during Stop 0 mode, the consumption
1168:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         is higher although the startup time is reduced.
1169:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @param STOPEntry  specifies if Stop mode in entered with WFI or WFE instruction.
1170:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1171:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
1172:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
1173:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
1174:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
1175:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
1176:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 1484              		.loc 1 1176 1 is_stmt 1 view -0
 1485              		.cfi_startproc
 1486              		@ args = 0, pretend = 0, frame = 0
 1487              		@ frame_needed = 0, uses_anonymous_args = 0
 1488              		@ link register save eliminated.
1177:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Check the parameters */
1178:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 1489              		.loc 1 1178 3 view .LVU298
1179:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1180:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Stop 0 mode with Main Regulator */
1181:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 1490              		.loc 1 1181 3 view .LVU299
 1491 0000 0A4A     		ldr	r2, .L192
 1492 0002 1368     		ldr	r3, [r2]
 1493 0004 23F00703 		bic	r3, r3, #7
 1494 0008 1360     		str	r3, [r2]
1182:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1183:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
1184:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 1495              		.loc 1 1184 3 view .LVU300
 1496 000a 094B     		ldr	r3, .L192+4
 1497 000c 1A69     		ldr	r2, [r3, #16]
1185:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1186:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Select Stop mode entry --------------------------------------------------*/
1187:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   if(STOPEntry == PWR_STOPENTRY_WFI)
 1498              		.loc 1 1187 5 is_stmt 0 view .LVU301
 1499 000e 0128     		cmp	r0, #1
1184:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 1500              		.loc 1 1184 3 view .LVU302
 1501 0010 42F00402 		orr	r2, r2, #4
 1502 0014 1A61     		str	r2, [r3, #16]
 1503              		.loc 1 1187 3 is_stmt 1 view .LVU303
 1504              		.loc 1 1187 5 is_stmt 0 view .LVU304
 1505 0016 05D1     		bne	.L190
1188:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
1189:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
1190:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __WFI();
 1506              		.loc 1 1190 5 is_stmt 1 view .LVU305
 1507              	.LBB28:
 1508              	.LBI28:
 1509              		.file 2 ".././hal/stm32l4/CMSIS/Include/cmsis_gcc.h"
   1:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
   9:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****    *
  21:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
  34:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
  35:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
  38:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #endif
  45:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
  46:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
  47:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   @{
  51:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
  52:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
  53:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
  54:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
  58:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
  60:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
  62:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
  63:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
  64:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
  65:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
  69:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
  71:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
  73:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
  74:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
  75:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
  76:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
  80:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
  82:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
  84:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
  87:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
  88:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
  89:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
  90:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
  94:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
  96:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
  98:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
  99:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 100:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 101:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 105:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 107:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 109:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 112:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 113:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 114:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 115:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 119:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 121:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 123:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 126:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 127:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 128:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 129:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 132:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 134:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 136:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 138:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 141:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 142:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 143:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 144:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 148:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 150:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 152:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 155:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 156:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 157:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 158:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 162:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 164:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 166:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 167:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 168:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 169:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 173:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 175:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 177:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 180:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 181:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 182:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 183:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 186:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 188:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 190:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 192:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 193:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 194:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 195:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 199:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 201:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 203:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 206:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 207:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 208:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 209:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 213:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 215:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 217:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 218:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 219:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 221:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 222:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 226:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 228:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 230:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 231:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 232:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 233:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 237:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 239:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 241:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 242:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 243:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 244:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 248:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 250:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 252:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 255:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 256:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 257:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 258:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 262:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 264:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 266:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 267:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 268:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 269:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 274:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 276:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 278:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 279:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 280:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 281:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 285:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 287:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 289:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 292:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 293:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 294:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 295:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 299:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 301:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 303:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 304:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 306:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 307:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 309:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 310:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 314:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 316:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 319:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #else
 325:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #endif
 327:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 328:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 329:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 330:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 331:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 335:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 337:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #endif
 343:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 344:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 345:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 347:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 348:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 349:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 351:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 352:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   @{
 356:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** */
 357:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 358:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #else
 365:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** #endif
 368:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 369:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 370:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 373:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 375:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 377:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 378:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 379:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 380:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 383:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 1510              		.loc 2 383 53 view .LVU306
 1511              	.LBB29:
 384:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 385:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 1512              		.loc 2 385 3 view .LVU307
 1513              		.syntax unified
 1514              	@ 385 ".././hal/stm32l4/CMSIS/Include/cmsis_gcc.h" 1
 1515 0018 30BF     		wfi
 1516              	@ 0 "" 2
 1517              		.thumb
 1518              		.syntax unified
 1519              	.L191:
 1520              	.LBE29:
 1521              	.LBE28:
1191:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
1192:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   else
1193:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
1194:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* Request Wait For Event */
1195:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __SEV();
1196:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __WFE();
1197:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __WFE();
1198:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
1199:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1200:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
1201:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 1522              		.loc 1 1201 3 view .LVU308
 1523 001a 1A69     		ldr	r2, [r3, #16]
 1524 001c 22F00402 		bic	r2, r2, #4
 1525 0020 1A61     		str	r2, [r3, #16]
1202:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 1526              		.loc 1 1202 1 is_stmt 0 view .LVU309
 1527 0022 7047     		bx	lr
 1528              	.L190:
1195:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __WFE();
 1529              		.loc 1 1195 5 is_stmt 1 view .LVU310
 1530              	.LBB30:
 1531              	.LBI30:
 386:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 387:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 388:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 389:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 390:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 394:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 396:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 398:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 399:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 400:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** /**
 401:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****  */
 404:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 1532              		.loc 2 404 53 view .LVU311
 1533              	.LBB31:
 405:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 406:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 1534              		.loc 2 406 3 view .LVU312
 1535              		.syntax unified
 1536              	@ 406 ".././hal/stm32l4/CMSIS/Include/cmsis_gcc.h" 1
 1537 0024 40BF     		sev
 1538              	@ 0 "" 2
 1539              		.thumb
 1540              		.syntax unified
 1541              	.LBE31:
 1542              	.LBE30:
1196:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __WFE();
 1543              		.loc 1 1196 5 view .LVU313
 1544              	.LBB32:
 1545              	.LBI32:
 394:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 1546              		.loc 2 394 53 view .LVU314
 1547              	.LBB33:
 396:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 1548              		.loc 2 396 3 view .LVU315
 1549              		.syntax unified
 1550              	@ 396 ".././hal/stm32l4/CMSIS/Include/cmsis_gcc.h" 1
 1551 0026 20BF     		wfe
 1552              	@ 0 "" 2
 1553              		.thumb
 1554              		.syntax unified
 1555              	.LBE33:
 1556              	.LBE32:
1197:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
 1557              		.loc 1 1197 5 view .LVU316
 1558              	.LBB34:
 1559              	.LBI34:
 394:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 1560              		.loc 2 394 53 view .LVU317
 1561              	.LBB35:
 396:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 1562              		.loc 2 396 3 view .LVU318
 1563              		.syntax unified
 1564              	@ 396 ".././hal/stm32l4/CMSIS/Include/cmsis_gcc.h" 1
 1565 0028 20BF     		wfe
 1566              	@ 0 "" 2
 397:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 1567              		.loc 2 397 1 is_stmt 0 view .LVU319
 1568              		.thumb
 1569              		.syntax unified
 1570 002a F6E7     		b	.L191
 1571              	.L193:
 1572              		.align	2
 1573              	.L192:
 1574 002c 00700040 		.word	1073770496
 1575 0030 00ED00E0 		.word	-536810240
 1576              	.LBE35:
 1577              	.LBE34:
 1578              		.cfi_endproc
 1579              	.LFE334:
 1581              		.section	.text.HAL_PWREx_EnterSTOP1Mode,"ax",%progbits
 1582              		.align	1
 1583              		.global	HAL_PWREx_EnterSTOP1Mode
 1584              		.syntax unified
 1585              		.thumb
 1586              		.thumb_func
 1587              		.fpu softvfp
 1589              	HAL_PWREx_EnterSTOP1Mode:
 1590              	.LVL81:
 1591              	.LFB335:
1203:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1204:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1205:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
1206:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enter Stop 1 mode.
1207:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  In Stop 1 mode, only low power voltage regulator is ON.
1208:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  In Stop 1 mode, all I/O pins keep the same state as in Run mode.
1209:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  All clocks in the VCORE domain are stopped; the PLL, the MSI,
1210:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        the HSI and the HSE oscillators are disabled. Some peripherals with the wakeup capabilit
1211:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        (I2Cx, USARTx and LPUART) can switch on the HSI to receive a frame, and switch off the H
1212:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        after receiving the frame if it is not a wakeup frame. In this case, the HSI clock is pr
1213:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        only to the peripheral requesting it.
1214:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        SRAM1, SRAM2 and register contents are preserved.
1215:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        The BOR is available.
1216:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  When exiting Stop 1 mode by issuing an interrupt or a wakeup event,
1217:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         the HSI RC oscillator is selected as system clock if STOPWUCK bit in RCC_CFGR register
1218:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         is set; the MSI oscillator is selected if STOPWUCK is cleared.
1219:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  Due to low power mode, an additional startup delay is incurred when waking up from Stop 
1220:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @param STOPEntry  specifies if Stop mode in entered with WFI or WFE instruction.
1221:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1222:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
1223:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
1224:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
1225:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
1226:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
1227:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 1592              		.loc 1 1227 1 is_stmt 1 view -0
 1593              		.cfi_startproc
 1594              		@ args = 0, pretend = 0, frame = 0
 1595              		@ frame_needed = 0, uses_anonymous_args = 0
 1596              		@ link register save eliminated.
1228:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Check the parameters */
1229:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 1597              		.loc 1 1229 3 view .LVU321
1230:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1231:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Stop 1 mode with Low-Power Regulator */
1232:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 1598              		.loc 1 1232 3 view .LVU322
 1599 0000 0B4A     		ldr	r2, .L197
 1600 0002 1368     		ldr	r3, [r2]
 1601 0004 23F00703 		bic	r3, r3, #7
 1602 0008 43F00103 		orr	r3, r3, #1
 1603 000c 1360     		str	r3, [r2]
1233:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1234:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
1235:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 1604              		.loc 1 1235 3 view .LVU323
 1605 000e 094B     		ldr	r3, .L197+4
 1606 0010 1A69     		ldr	r2, [r3, #16]
1236:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1237:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Select Stop mode entry --------------------------------------------------*/
1238:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   if(STOPEntry == PWR_STOPENTRY_WFI)
 1607              		.loc 1 1238 5 is_stmt 0 view .LVU324
 1608 0012 0128     		cmp	r0, #1
1235:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 1609              		.loc 1 1235 3 view .LVU325
 1610 0014 42F00402 		orr	r2, r2, #4
 1611 0018 1A61     		str	r2, [r3, #16]
 1612              		.loc 1 1238 3 is_stmt 1 view .LVU326
 1613              		.loc 1 1238 5 is_stmt 0 view .LVU327
 1614 001a 05D1     		bne	.L195
1239:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
1240:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
1241:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __WFI();
 1615              		.loc 1 1241 5 is_stmt 1 view .LVU328
 1616              	.LBB36:
 1617              	.LBI36:
 383:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 1618              		.loc 2 383 53 view .LVU329
 1619              	.LBB37:
 385:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 1620              		.loc 2 385 3 view .LVU330
 1621              		.syntax unified
 1622              	@ 385 ".././hal/stm32l4/CMSIS/Include/cmsis_gcc.h" 1
 1623 001c 30BF     		wfi
 1624              	@ 0 "" 2
 1625              		.thumb
 1626              		.syntax unified
 1627              	.L196:
 1628              	.LBE37:
 1629              	.LBE36:
1242:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
1243:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   else
1244:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
1245:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* Request Wait For Event */
1246:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __SEV();
1247:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __WFE();
1248:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __WFE();
1249:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
1250:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1251:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
1252:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 1630              		.loc 1 1252 3 view .LVU331
 1631 001e 1A69     		ldr	r2, [r3, #16]
 1632 0020 22F00402 		bic	r2, r2, #4
 1633 0024 1A61     		str	r2, [r3, #16]
1253:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 1634              		.loc 1 1253 1 is_stmt 0 view .LVU332
 1635 0026 7047     		bx	lr
 1636              	.L195:
1246:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __WFE();
 1637              		.loc 1 1246 5 is_stmt 1 view .LVU333
 1638              	.LBB38:
 1639              	.LBI38:
 404:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 1640              		.loc 2 404 53 view .LVU334
 1641              	.LBB39:
 1642              		.loc 2 406 3 view .LVU335
 1643              		.syntax unified
 1644              	@ 406 ".././hal/stm32l4/CMSIS/Include/cmsis_gcc.h" 1
 1645 0028 40BF     		sev
 1646              	@ 0 "" 2
 1647              		.thumb
 1648              		.syntax unified
 1649              	.LBE39:
 1650              	.LBE38:
1247:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __WFE();
 1651              		.loc 1 1247 5 view .LVU336
 1652              	.LBB40:
 1653              	.LBI40:
 394:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 1654              		.loc 2 394 53 view .LVU337
 1655              	.LBB41:
 396:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 1656              		.loc 2 396 3 view .LVU338
 1657              		.syntax unified
 1658              	@ 396 ".././hal/stm32l4/CMSIS/Include/cmsis_gcc.h" 1
 1659 002a 20BF     		wfe
 1660              	@ 0 "" 2
 1661              		.thumb
 1662              		.syntax unified
 1663              	.LBE41:
 1664              	.LBE40:
1248:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
 1665              		.loc 1 1248 5 view .LVU339
 1666              	.LBB42:
 1667              	.LBI42:
 394:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 1668              		.loc 2 394 53 view .LVU340
 1669              	.LBB43:
 396:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 1670              		.loc 2 396 3 view .LVU341
 1671              		.syntax unified
 1672              	@ 396 ".././hal/stm32l4/CMSIS/Include/cmsis_gcc.h" 1
 1673 002c 20BF     		wfe
 1674              	@ 0 "" 2
 397:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 1675              		.loc 2 397 1 is_stmt 0 view .LVU342
 1676              		.thumb
 1677              		.syntax unified
 1678 002e F6E7     		b	.L196
 1679              	.L198:
 1680              		.align	2
 1681              	.L197:
 1682 0030 00700040 		.word	1073770496
 1683 0034 00ED00E0 		.word	-536810240
 1684              	.LBE43:
 1685              	.LBE42:
 1686              		.cfi_endproc
 1687              	.LFE335:
 1689              		.section	.text.HAL_PWREx_EnterSTOP2Mode,"ax",%progbits
 1690              		.align	1
 1691              		.global	HAL_PWREx_EnterSTOP2Mode
 1692              		.syntax unified
 1693              		.thumb
 1694              		.thumb_func
 1695              		.fpu softvfp
 1697              	HAL_PWREx_EnterSTOP2Mode:
 1698              	.LVL82:
 1699              	.LFB336:
1254:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1255:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1256:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
1257:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enter Stop 2 mode.
1258:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  In Stop 2 mode, only low power voltage regulator is ON.
1259:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  In Stop 2 mode, all I/O pins keep the same state as in Run mode.
1260:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  All clocks in the VCORE domain are stopped, the PLL, the MSI,
1261:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        the HSI and the HSE oscillators are disabled. Some peripherals with wakeup capability
1262:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        (LCD, LPTIM1, I2C3 and LPUART) can switch on the HSI to receive a frame, and switch off 
1263:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        receiving the frame if it is not a wakeup frame. In this case the HSI clock is propagate
1264:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        to the peripheral requesting it.
1265:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        SRAM1, SRAM2 and register contents are preserved.
1266:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        The BOR is available.
1267:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        The voltage regulator is set in low-power mode but LPR bit must be cleared to enter stop
1268:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        Otherwise, Stop 1 mode is entered.
1269:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  When exiting Stop 2 mode by issuing an interrupt or a wakeup event,
1270:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         the HSI RC oscillator is selected as system clock if STOPWUCK bit in RCC_CFGR register
1271:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *         is set; the MSI oscillator is selected if STOPWUCK is cleared.
1272:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @param STOPEntry  specifies if Stop mode in entered with WFI or WFE instruction.
1273:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1274:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
1275:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
1276:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
1277:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
1278:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
1279:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 1700              		.loc 1 1279 1 is_stmt 1 view -0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 0, uses_anonymous_args = 0
 1704              		@ link register save eliminated.
1280:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Check the parameter */
1281:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 1705              		.loc 1 1281 3 view .LVU344
1282:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1283:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Set Stop mode 2 */
1284:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 1706              		.loc 1 1284 3 view .LVU345
 1707 0000 0B4A     		ldr	r2, .L202
 1708 0002 1368     		ldr	r3, [r2]
 1709 0004 23F00703 		bic	r3, r3, #7
 1710 0008 43F00203 		orr	r3, r3, #2
 1711 000c 1360     		str	r3, [r2]
1285:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1286:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
1287:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 1712              		.loc 1 1287 3 view .LVU346
 1713 000e 094B     		ldr	r3, .L202+4
 1714 0010 1A69     		ldr	r2, [r3, #16]
1288:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1289:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Select Stop mode entry --------------------------------------------------*/
1290:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   if(STOPEntry == PWR_STOPENTRY_WFI)
 1715              		.loc 1 1290 5 is_stmt 0 view .LVU347
 1716 0012 0128     		cmp	r0, #1
1287:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 1717              		.loc 1 1287 3 view .LVU348
 1718 0014 42F00402 		orr	r2, r2, #4
 1719 0018 1A61     		str	r2, [r3, #16]
 1720              		.loc 1 1290 3 is_stmt 1 view .LVU349
 1721              		.loc 1 1290 5 is_stmt 0 view .LVU350
 1722 001a 05D1     		bne	.L200
1291:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
1292:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
1293:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __WFI();
 1723              		.loc 1 1293 5 is_stmt 1 view .LVU351
 1724              	.LBB44:
 1725              	.LBI44:
 383:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 1726              		.loc 2 383 53 view .LVU352
 1727              	.LBB45:
 385:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 1728              		.loc 2 385 3 view .LVU353
 1729              		.syntax unified
 1730              	@ 385 ".././hal/stm32l4/CMSIS/Include/cmsis_gcc.h" 1
 1731 001c 30BF     		wfi
 1732              	@ 0 "" 2
 1733              		.thumb
 1734              		.syntax unified
 1735              	.L201:
 1736              	.LBE45:
 1737              	.LBE44:
1294:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
1295:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   else
1296:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
1297:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* Request Wait For Event */
1298:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __SEV();
1299:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __WFE();
1300:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __WFE();
1301:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
1302:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1303:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
1304:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 1738              		.loc 1 1304 3 view .LVU354
 1739 001e 1A69     		ldr	r2, [r3, #16]
 1740 0020 22F00402 		bic	r2, r2, #4
 1741 0024 1A61     		str	r2, [r3, #16]
1305:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 1742              		.loc 1 1305 1 is_stmt 0 view .LVU355
 1743 0026 7047     		bx	lr
 1744              	.L200:
1298:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __WFE();
 1745              		.loc 1 1298 5 is_stmt 1 view .LVU356
 1746              	.LBB46:
 1747              	.LBI46:
 404:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 1748              		.loc 2 404 53 view .LVU357
 1749              	.LBB47:
 1750              		.loc 2 406 3 view .LVU358
 1751              		.syntax unified
 1752              	@ 406 ".././hal/stm32l4/CMSIS/Include/cmsis_gcc.h" 1
 1753 0028 40BF     		sev
 1754              	@ 0 "" 2
 1755              		.thumb
 1756              		.syntax unified
 1757              	.LBE47:
 1758              	.LBE46:
1299:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __WFE();
 1759              		.loc 1 1299 5 view .LVU359
 1760              	.LBB48:
 1761              	.LBI48:
 394:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 1762              		.loc 2 394 53 view .LVU360
 1763              	.LBB49:
 396:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 1764              		.loc 2 396 3 view .LVU361
 1765              		.syntax unified
 1766              	@ 396 ".././hal/stm32l4/CMSIS/Include/cmsis_gcc.h" 1
 1767 002a 20BF     		wfe
 1768              	@ 0 "" 2
 1769              		.thumb
 1770              		.syntax unified
 1771              	.LBE49:
 1772              	.LBE48:
1300:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
 1773              		.loc 1 1300 5 view .LVU362
 1774              	.LBB50:
 1775              	.LBI50:
 394:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 1776              		.loc 2 394 53 view .LVU363
 1777              	.LBB51:
 396:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 1778              		.loc 2 396 3 view .LVU364
 1779              		.syntax unified
 1780              	@ 396 ".././hal/stm32l4/CMSIS/Include/cmsis_gcc.h" 1
 1781 002c 20BF     		wfe
 1782              	@ 0 "" 2
 397:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** 
 1783              		.loc 2 397 1 is_stmt 0 view .LVU365
 1784              		.thumb
 1785              		.syntax unified
 1786 002e F6E7     		b	.L201
 1787              	.L203:
 1788              		.align	2
 1789              	.L202:
 1790 0030 00700040 		.word	1073770496
 1791 0034 00ED00E0 		.word	-536810240
 1792              	.LBE51:
 1793              	.LBE50:
 1794              		.cfi_endproc
 1795              	.LFE336:
 1797              		.section	.text.HAL_PWREx_EnterSHUTDOWNMode,"ax",%progbits
 1798              		.align	1
 1799              		.global	HAL_PWREx_EnterSHUTDOWNMode
 1800              		.syntax unified
 1801              		.thumb
 1802              		.thumb_func
 1803              		.fpu softvfp
 1805              	HAL_PWREx_EnterSHUTDOWNMode:
 1806              	.LFB337:
1306:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1307:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1308:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1309:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1310:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1311:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
1312:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief Enter Shutdown mode.
1313:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  In Shutdown mode, the PLL, the HSI, the MSI, the LSI and the HSE oscillators are switche
1314:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        off. The voltage regulator is disabled and Vcore domain is powered off.
1315:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        SRAM1, SRAM2 and registers contents are lost except for registers in the Backup domain.
1316:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   *        The BOR is not available.
1317:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog s
1318:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
1319:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
1320:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSHUTDOWNMode(void)
1321:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 1807              		.loc 1 1321 1 is_stmt 1 view -0
 1808              		.cfi_startproc
 1809              		@ args = 0, pretend = 0, frame = 0
 1810              		@ frame_needed = 0, uses_anonymous_args = 0
 1811              		@ link register save eliminated.
1322:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1323:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Set Shutdown mode */
1324:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 1812              		.loc 1 1324 3 view .LVU367
 1813 0000 064A     		ldr	r2, .L205
 1814 0002 1368     		ldr	r3, [r2]
 1815 0004 23F00703 		bic	r3, r3, #7
 1816 0008 43F00403 		orr	r3, r3, #4
 1817 000c 1360     		str	r3, [r2]
1325:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1326:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
1327:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 1818              		.loc 1 1327 3 view .LVU368
 1819 000e 044A     		ldr	r2, .L205+4
 1820 0010 1369     		ldr	r3, [r2, #16]
 1821 0012 43F00403 		orr	r3, r3, #4
 1822 0016 1361     		str	r3, [r2, #16]
1328:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1329:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /* This option is used to ensure that store operations are completed */
1330:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined ( __CC_ARM)
1331:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   __force_stores();
1332:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif
1333:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Request Wait For Interrupt */
1334:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   __WFI();
 1823              		.loc 1 1334 3 view .LVU369
 1824              	.LBB52:
 1825              	.LBI52:
 383:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** {
 1826              		.loc 2 383 53 view .LVU370
 1827              	.LBB53:
 385:.././hal/stm32l4/CMSIS/Include/cmsis_gcc.h **** }
 1828              		.loc 2 385 3 view .LVU371
 1829              		.syntax unified
 1830              	@ 385 ".././hal/stm32l4/CMSIS/Include/cmsis_gcc.h" 1
 1831 0018 30BF     		wfi
 1832              	@ 0 "" 2
 1833              		.thumb
 1834              		.syntax unified
 1835              	.LBE53:
 1836              	.LBE52:
1335:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 1837              		.loc 1 1335 1 is_stmt 0 view .LVU372
 1838 001a 7047     		bx	lr
 1839              	.L206:
 1840              		.align	2
 1841              	.L205:
 1842 001c 00700040 		.word	1073770496
 1843 0020 00ED00E0 		.word	-536810240
 1844              		.cfi_endproc
 1845              	.LFE337:
 1847              		.section	.text.HAL_PWREx_PVM1Callback,"ax",%progbits
 1848              		.align	1
 1849              		.weak	HAL_PWREx_PVM1Callback
 1850              		.syntax unified
 1851              		.thumb
 1852              		.thumb_func
 1853              		.fpu softvfp
 1855              	HAL_PWREx_PVM1Callback:
 1856              	.LFB339:
1336:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1337:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1338:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1339:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1340:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
1341:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief This function handles the PWR PVD/PVMx interrupt request.
1342:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @note This API should be called under the PVD_PVM_IRQHandler().
1343:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
1344:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
1345:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** void HAL_PWREx_PVD_PVM_IRQHandler(void)
1346:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
1347:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Check PWR exti flag */
1348:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
1349:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
1350:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* PWR PVD interrupt user callback */
1351:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     HAL_PWR_PVDCallback();
1352:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1353:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* Clear PVD exti pending bit */
1354:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
1355:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
1356:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Next, successively check PVMx exti flags */
1357:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(PWR_CR2_PVME1)
1358:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
1359:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
1360:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* PWR PVM1 interrupt user callback */
1361:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     HAL_PWREx_PVM1Callback();
1362:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1363:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* Clear PVM1 exti pending bit */
1364:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
1365:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
1366:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif /* PWR_CR2_PVME1 */
1367:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(PWR_CR2_PVME2)
1368:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
1369:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
1370:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* PWR PVM2 interrupt user callback */
1371:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     HAL_PWREx_PVM2Callback();
1372:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1373:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* Clear PVM2 exti pending bit */
1374:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
1375:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
1376:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #endif /* PWR_CR2_PVME2 */
1377:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
1378:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
1379:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* PWR PVM3 interrupt user callback */
1380:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     HAL_PWREx_PVM3Callback();
1381:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1382:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* Clear PVM3 exti pending bit */
1383:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
1384:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
1385:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
1386:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
1387:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* PWR PVM4 interrupt user callback */
1388:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     HAL_PWREx_PVM4Callback();
1389:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1390:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     /* Clear PVM4 exti pending bit */
1391:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****     __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
1392:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
1393:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
1394:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1395:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
1396:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** #if defined(PWR_CR2_PVME1)
1397:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** /**
1398:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @brief PWR PVM1 interrupt callback
1399:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   * @retval None
1400:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   */
1401:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** __weak void HAL_PWREx_PVM1Callback(void)
1402:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** {
 1857              		.loc 1 1402 1 is_stmt 1 view -0
 1858              		.cfi_startproc
 1859              		@ args = 0, pretend = 0, frame = 0
 1860              		@ frame_needed = 0, uses_anonymous_args = 0
 1861              		@ link register save eliminated.
1403:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified; when the callback is needed,
1404:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****             HAL_PWREx_PVM1Callback() API can be implemented in the user file
1405:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****    */
1406:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** }
 1862              		.loc 1 1406 1 view .LVU374
 1863 0000 7047     		bx	lr
 1864              		.cfi_endproc
 1865              	.LFE339:
 1867              		.section	.text.HAL_PWREx_PVM3Callback,"ax",%progbits
 1868              		.align	1
 1869              		.weak	HAL_PWREx_PVM3Callback
 1870              		.syntax unified
 1871              		.thumb
 1872              		.thumb_func
 1873              		.fpu softvfp
 1875              	HAL_PWREx_PVM3Callback:
 1876              	.LFB343:
 1877              		.cfi_startproc
 1878              		@ args = 0, pretend = 0, frame = 0
 1879              		@ frame_needed = 0, uses_anonymous_args = 0
 1880              		@ link register save eliminated.
 1881 0000 7047     		bx	lr
 1882              		.cfi_endproc
 1883              	.LFE343:
 1885              		.section	.text.HAL_PWREx_PVM4Callback,"ax",%progbits
 1886              		.align	1
 1887              		.weak	HAL_PWREx_PVM4Callback
 1888              		.syntax unified
 1889              		.thumb
 1890              		.thumb_func
 1891              		.fpu softvfp
 1893              	HAL_PWREx_PVM4Callback:
 1894              	.LFB345:
 1895              		.cfi_startproc
 1896              		@ args = 0, pretend = 0, frame = 0
 1897              		@ frame_needed = 0, uses_anonymous_args = 0
 1898              		@ link register save eliminated.
 1899 0000 7047     		bx	lr
 1900              		.cfi_endproc
 1901              	.LFE345:
 1903              		.section	.text.HAL_PWREx_PVD_PVM_IRQHandler,"ax",%progbits
 1904              		.align	1
 1905              		.global	HAL_PWREx_PVD_PVM_IRQHandler
 1906              		.syntax unified
 1907              		.thumb
 1908              		.thumb_func
 1909              		.fpu softvfp
 1911              	HAL_PWREx_PVD_PVM_IRQHandler:
 1912              	.LFB338:
1346:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Check PWR exti flag */
 1913              		.loc 1 1346 1 view -0
 1914              		.cfi_startproc
 1915              		@ args = 0, pretend = 0, frame = 0
 1916              		@ frame_needed = 0, uses_anonymous_args = 0
1348:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 1917              		.loc 1 1348 3 view .LVU376
1346:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   /* Check PWR exti flag */
 1918              		.loc 1 1346 1 is_stmt 0 view .LVU377
 1919 0000 10B5     		push	{r4, lr}
 1920              	.LCFI0:
 1921              		.cfi_def_cfa_offset 8
 1922              		.cfi_offset 4, -8
 1923              		.cfi_offset 14, -4
1348:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 1924              		.loc 1 1348 6 view .LVU378
 1925 0002 0F4C     		ldr	r4, .L227
 1926 0004 6369     		ldr	r3, [r4, #20]
1348:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 1927              		.loc 1 1348 5 view .LVU379
 1928 0006 D803     		lsls	r0, r3, #15
 1929 0008 04D5     		bpl	.L211
1351:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 1930              		.loc 1 1351 5 is_stmt 1 view .LVU380
 1931 000a FFF7FEFF 		bl	HAL_PWR_PVDCallback
 1932              	.LVL83:
1354:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
 1933              		.loc 1 1354 5 view .LVU381
 1934 000e 4FF48033 		mov	r3, #65536
 1935 0012 6361     		str	r3, [r4, #20]
 1936              	.L211:
1358:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 1937              		.loc 1 1358 3 view .LVU382
1358:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 1938              		.loc 1 1358 6 is_stmt 0 view .LVU383
 1939 0014 636B     		ldr	r3, [r4, #52]
1358:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 1940              		.loc 1 1358 5 view .LVU384
 1941 0016 1907     		lsls	r1, r3, #28
 1942 0018 03D5     		bpl	.L212
1361:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 1943              		.loc 1 1361 5 is_stmt 1 view .LVU385
 1944 001a FFF7FEFF 		bl	HAL_PWREx_PVM1Callback
 1945              	.LVL84:
1364:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
 1946              		.loc 1 1364 5 view .LVU386
 1947 001e 0823     		movs	r3, #8
 1948 0020 6363     		str	r3, [r4, #52]
 1949              	.L212:
1377:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 1950              		.loc 1 1377 3 view .LVU387
1377:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 1951              		.loc 1 1377 6 is_stmt 0 view .LVU388
 1952 0022 636B     		ldr	r3, [r4, #52]
1377:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 1953              		.loc 1 1377 5 view .LVU389
 1954 0024 9A06     		lsls	r2, r3, #26
 1955 0026 03D5     		bpl	.L213
1380:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 1956              		.loc 1 1380 5 is_stmt 1 view .LVU390
 1957 0028 FFF7FEFF 		bl	HAL_PWREx_PVM3Callback
 1958              	.LVL85:
1383:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
 1959              		.loc 1 1383 5 view .LVU391
 1960 002c 2023     		movs	r3, #32
 1961 002e 6363     		str	r3, [r4, #52]
 1962              	.L213:
1385:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 1963              		.loc 1 1385 3 view .LVU392
1385:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 1964              		.loc 1 1385 6 is_stmt 0 view .LVU393
 1965 0030 636B     		ldr	r3, [r4, #52]
1385:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   {
 1966              		.loc 1 1385 5 view .LVU394
 1967 0032 5B06     		lsls	r3, r3, #25
 1968 0034 03D5     		bpl	.L210
1388:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 1969              		.loc 1 1388 5 is_stmt 1 view .LVU395
 1970 0036 FFF7FEFF 		bl	HAL_PWREx_PVM4Callback
 1971              	.LVL86:
1391:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c ****   }
 1972              		.loc 1 1391 5 view .LVU396
 1973 003a 4023     		movs	r3, #64
 1974 003c 6363     		str	r3, [r4, #52]
 1975              	.L210:
1393:.././hal/stm32l4/Src/stm32l4xx_hal_pwr_ex.c **** 
 1976              		.loc 1 1393 1 is_stmt 0 view .LVU397
 1977 003e 10BD     		pop	{r4, pc}
 1978              	.L228:
 1979              		.align	2
 1980              	.L227:
 1981 0040 00040140 		.word	1073808384
 1982              		.cfi_endproc
 1983              	.LFE338:
 1985              		.text
 1986              	.Letext0:
 1987              		.file 3 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 1988              		.file 4 ".././hal/stm32l4/CMSIS/Include/core_cm4.h"
 1989              		.file 5 ".././hal/stm32l4/system_stm32l4xx.h"
 1990              		.file 6 ".././hal/stm32l4/stm32l443xx.h"
 1991              		.file 7 ".././hal/stm32l4/Inc/stm32l4xx_hal_def.h"
 1992              		.file 8 ".././hal/stm32l4/Inc/stm32l4xx_hal_pwr_ex.h"
 1993              		.file 9 ".././hal/stm32l4/Inc/stm32l4xx_hal.h"
 1994              		.file 10 ".././hal/stm32l4/Inc/stm32l4xx_hal_pwr.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l4xx_hal_pwr_ex.c
     /tmp/ccuU3JLM.s:16     .text.HAL_PWREx_GetVoltageRange:0000000000000000 $t
     /tmp/ccuU3JLM.s:24     .text.HAL_PWREx_GetVoltageRange:0000000000000000 HAL_PWREx_GetVoltageRange
     /tmp/ccuU3JLM.s:42     .text.HAL_PWREx_GetVoltageRange:000000000000000c $d
     /tmp/ccuU3JLM.s:47     .text.HAL_PWREx_ControlVoltageScaling:0000000000000000 $t
     /tmp/ccuU3JLM.s:54     .text.HAL_PWREx_ControlVoltageScaling:0000000000000000 HAL_PWREx_ControlVoltageScaling
     /tmp/ccuU3JLM.s:146    .text.HAL_PWREx_ControlVoltageScaling:0000000000000060 $d
     /tmp/ccuU3JLM.s:153    .text.HAL_PWREx_EnableBatteryCharging:0000000000000000 $t
     /tmp/ccuU3JLM.s:160    .text.HAL_PWREx_EnableBatteryCharging:0000000000000000 HAL_PWREx_EnableBatteryCharging
     /tmp/ccuU3JLM.s:184    .text.HAL_PWREx_EnableBatteryCharging:0000000000000018 $d
     /tmp/ccuU3JLM.s:189    .text.HAL_PWREx_DisableBatteryCharging:0000000000000000 $t
     /tmp/ccuU3JLM.s:196    .text.HAL_PWREx_DisableBatteryCharging:0000000000000000 HAL_PWREx_DisableBatteryCharging
     /tmp/ccuU3JLM.s:213    .text.HAL_PWREx_DisableBatteryCharging:000000000000000c $d
     /tmp/ccuU3JLM.s:218    .text.HAL_PWREx_EnableVddUSB:0000000000000000 $t
     /tmp/ccuU3JLM.s:225    .text.HAL_PWREx_EnableVddUSB:0000000000000000 HAL_PWREx_EnableVddUSB
     /tmp/ccuU3JLM.s:242    .text.HAL_PWREx_EnableVddUSB:000000000000000c $d
     /tmp/ccuU3JLM.s:247    .text.HAL_PWREx_DisableVddUSB:0000000000000000 $t
     /tmp/ccuU3JLM.s:254    .text.HAL_PWREx_DisableVddUSB:0000000000000000 HAL_PWREx_DisableVddUSB
     /tmp/ccuU3JLM.s:271    .text.HAL_PWREx_DisableVddUSB:000000000000000c $d
     /tmp/ccuU3JLM.s:276    .text.HAL_PWREx_EnableInternalWakeUpLine:0000000000000000 $t
     /tmp/ccuU3JLM.s:283    .text.HAL_PWREx_EnableInternalWakeUpLine:0000000000000000 HAL_PWREx_EnableInternalWakeUpLine
     /tmp/ccuU3JLM.s:300    .text.HAL_PWREx_EnableInternalWakeUpLine:000000000000000c $d
     /tmp/ccuU3JLM.s:305    .text.HAL_PWREx_DisableInternalWakeUpLine:0000000000000000 $t
     /tmp/ccuU3JLM.s:312    .text.HAL_PWREx_DisableInternalWakeUpLine:0000000000000000 HAL_PWREx_DisableInternalWakeUpLine
     /tmp/ccuU3JLM.s:329    .text.HAL_PWREx_DisableInternalWakeUpLine:000000000000000c $d
     /tmp/ccuU3JLM.s:334    .text.HAL_PWREx_EnableGPIOPullUp:0000000000000000 $t
     /tmp/ccuU3JLM.s:341    .text.HAL_PWREx_EnableGPIOPullUp:0000000000000000 HAL_PWREx_EnableGPIOPullUp
     /tmp/ccuU3JLM.s:357    .text.HAL_PWREx_EnableGPIOPullUp:0000000000000008 $d
     /tmp/ccuU3JLM.s:365    .text.HAL_PWREx_EnableGPIOPullUp:0000000000000010 $t
     /tmp/ccuU3JLM.s:476    .text.HAL_PWREx_EnableGPIOPullUp:0000000000000094 $d
     /tmp/ccuU3JLM.s:481    .text.HAL_PWREx_DisableGPIOPullUp:0000000000000000 $t
     /tmp/ccuU3JLM.s:488    .text.HAL_PWREx_DisableGPIOPullUp:0000000000000000 HAL_PWREx_DisableGPIOPullUp
     /tmp/ccuU3JLM.s:504    .text.HAL_PWREx_DisableGPIOPullUp:0000000000000008 $d
     /tmp/ccuU3JLM.s:512    .text.HAL_PWREx_DisableGPIOPullUp:0000000000000010 $t
     /tmp/ccuU3JLM.s:596    .text.HAL_PWREx_DisableGPIOPullUp:0000000000000068 $d
     /tmp/ccuU3JLM.s:601    .text.HAL_PWREx_EnableGPIOPullDown:0000000000000000 $t
     /tmp/ccuU3JLM.s:608    .text.HAL_PWREx_EnableGPIOPullDown:0000000000000000 HAL_PWREx_EnableGPIOPullDown
     /tmp/ccuU3JLM.s:624    .text.HAL_PWREx_EnableGPIOPullDown:0000000000000008 $d
     /tmp/ccuU3JLM.s:632    .text.HAL_PWREx_EnableGPIOPullDown:0000000000000010 $t
     /tmp/ccuU3JLM.s:745    .text.HAL_PWREx_EnableGPIOPullDown:0000000000000094 $d
     /tmp/ccuU3JLM.s:750    .text.HAL_PWREx_DisableGPIOPullDown:0000000000000000 $t
     /tmp/ccuU3JLM.s:757    .text.HAL_PWREx_DisableGPIOPullDown:0000000000000000 HAL_PWREx_DisableGPIOPullDown
     /tmp/ccuU3JLM.s:773    .text.HAL_PWREx_DisableGPIOPullDown:0000000000000008 $d
     /tmp/ccuU3JLM.s:781    .text.HAL_PWREx_DisableGPIOPullDown:0000000000000010 $t
     /tmp/ccuU3JLM.s:866    .text.HAL_PWREx_DisableGPIOPullDown:000000000000006c $d
     /tmp/ccuU3JLM.s:871    .text.HAL_PWREx_EnablePullUpPullDownConfig:0000000000000000 $t
     /tmp/ccuU3JLM.s:878    .text.HAL_PWREx_EnablePullUpPullDownConfig:0000000000000000 HAL_PWREx_EnablePullUpPullDownConfig
     /tmp/ccuU3JLM.s:895    .text.HAL_PWREx_EnablePullUpPullDownConfig:000000000000000c $d
     /tmp/ccuU3JLM.s:900    .text.HAL_PWREx_DisablePullUpPullDownConfig:0000000000000000 $t
     /tmp/ccuU3JLM.s:907    .text.HAL_PWREx_DisablePullUpPullDownConfig:0000000000000000 HAL_PWREx_DisablePullUpPullDownConfig
     /tmp/ccuU3JLM.s:924    .text.HAL_PWREx_DisablePullUpPullDownConfig:000000000000000c $d
     /tmp/ccuU3JLM.s:929    .text.HAL_PWREx_EnableSRAM2ContentRetention:0000000000000000 $t
     /tmp/ccuU3JLM.s:936    .text.HAL_PWREx_EnableSRAM2ContentRetention:0000000000000000 HAL_PWREx_EnableSRAM2ContentRetention
     /tmp/ccuU3JLM.s:953    .text.HAL_PWREx_EnableSRAM2ContentRetention:000000000000000c $d
     /tmp/ccuU3JLM.s:958    .text.HAL_PWREx_DisableSRAM2ContentRetention:0000000000000000 $t
     /tmp/ccuU3JLM.s:965    .text.HAL_PWREx_DisableSRAM2ContentRetention:0000000000000000 HAL_PWREx_DisableSRAM2ContentRetention
     /tmp/ccuU3JLM.s:982    .text.HAL_PWREx_DisableSRAM2ContentRetention:000000000000000c $d
     /tmp/ccuU3JLM.s:987    .text.HAL_PWREx_EnablePVM1:0000000000000000 $t
     /tmp/ccuU3JLM.s:994    .text.HAL_PWREx_EnablePVM1:0000000000000000 HAL_PWREx_EnablePVM1
     /tmp/ccuU3JLM.s:1011   .text.HAL_PWREx_EnablePVM1:000000000000000c $d
     /tmp/ccuU3JLM.s:1016   .text.HAL_PWREx_DisablePVM1:0000000000000000 $t
     /tmp/ccuU3JLM.s:1023   .text.HAL_PWREx_DisablePVM1:0000000000000000 HAL_PWREx_DisablePVM1
     /tmp/ccuU3JLM.s:1040   .text.HAL_PWREx_DisablePVM1:000000000000000c $d
     /tmp/ccuU3JLM.s:1045   .text.HAL_PWREx_EnablePVM3:0000000000000000 $t
     /tmp/ccuU3JLM.s:1052   .text.HAL_PWREx_EnablePVM3:0000000000000000 HAL_PWREx_EnablePVM3
     /tmp/ccuU3JLM.s:1069   .text.HAL_PWREx_EnablePVM3:000000000000000c $d
     /tmp/ccuU3JLM.s:1074   .text.HAL_PWREx_DisablePVM3:0000000000000000 $t
     /tmp/ccuU3JLM.s:1081   .text.HAL_PWREx_DisablePVM3:0000000000000000 HAL_PWREx_DisablePVM3
     /tmp/ccuU3JLM.s:1098   .text.HAL_PWREx_DisablePVM3:000000000000000c $d
     /tmp/ccuU3JLM.s:1103   .text.HAL_PWREx_EnablePVM4:0000000000000000 $t
     /tmp/ccuU3JLM.s:1110   .text.HAL_PWREx_EnablePVM4:0000000000000000 HAL_PWREx_EnablePVM4
     /tmp/ccuU3JLM.s:1127   .text.HAL_PWREx_EnablePVM4:000000000000000c $d
     /tmp/ccuU3JLM.s:1132   .text.HAL_PWREx_DisablePVM4:0000000000000000 $t
     /tmp/ccuU3JLM.s:1139   .text.HAL_PWREx_DisablePVM4:0000000000000000 HAL_PWREx_DisablePVM4
     /tmp/ccuU3JLM.s:1156   .text.HAL_PWREx_DisablePVM4:000000000000000c $d
     /tmp/ccuU3JLM.s:1161   .text.HAL_PWREx_ConfigPVM:0000000000000000 $t
     /tmp/ccuU3JLM.s:1168   .text.HAL_PWREx_ConfigPVM:0000000000000000 HAL_PWREx_ConfigPVM
     /tmp/ccuU3JLM.s:1367   .text.HAL_PWREx_ConfigPVM:0000000000000118 $d
     /tmp/ccuU3JLM.s:1372   .text.HAL_PWREx_EnableLowPowerRunMode:0000000000000000 $t
     /tmp/ccuU3JLM.s:1379   .text.HAL_PWREx_EnableLowPowerRunMode:0000000000000000 HAL_PWREx_EnableLowPowerRunMode
     /tmp/ccuU3JLM.s:1396   .text.HAL_PWREx_EnableLowPowerRunMode:000000000000000c $d
     /tmp/ccuU3JLM.s:1401   .text.HAL_PWREx_DisableLowPowerRunMode:0000000000000000 $t
     /tmp/ccuU3JLM.s:1408   .text.HAL_PWREx_DisableLowPowerRunMode:0000000000000000 HAL_PWREx_DisableLowPowerRunMode
     /tmp/ccuU3JLM.s:1467   .text.HAL_PWREx_DisableLowPowerRunMode:0000000000000038 $d
     /tmp/ccuU3JLM.s:1474   .text.HAL_PWREx_EnterSTOP0Mode:0000000000000000 $t
     /tmp/ccuU3JLM.s:1481   .text.HAL_PWREx_EnterSTOP0Mode:0000000000000000 HAL_PWREx_EnterSTOP0Mode
     /tmp/ccuU3JLM.s:1574   .text.HAL_PWREx_EnterSTOP0Mode:000000000000002c $d
     /tmp/ccuU3JLM.s:1582   .text.HAL_PWREx_EnterSTOP1Mode:0000000000000000 $t
     /tmp/ccuU3JLM.s:1589   .text.HAL_PWREx_EnterSTOP1Mode:0000000000000000 HAL_PWREx_EnterSTOP1Mode
     /tmp/ccuU3JLM.s:1682   .text.HAL_PWREx_EnterSTOP1Mode:0000000000000030 $d
     /tmp/ccuU3JLM.s:1690   .text.HAL_PWREx_EnterSTOP2Mode:0000000000000000 $t
     /tmp/ccuU3JLM.s:1697   .text.HAL_PWREx_EnterSTOP2Mode:0000000000000000 HAL_PWREx_EnterSTOP2Mode
     /tmp/ccuU3JLM.s:1790   .text.HAL_PWREx_EnterSTOP2Mode:0000000000000030 $d
     /tmp/ccuU3JLM.s:1798   .text.HAL_PWREx_EnterSHUTDOWNMode:0000000000000000 $t
     /tmp/ccuU3JLM.s:1805   .text.HAL_PWREx_EnterSHUTDOWNMode:0000000000000000 HAL_PWREx_EnterSHUTDOWNMode
     /tmp/ccuU3JLM.s:1842   .text.HAL_PWREx_EnterSHUTDOWNMode:000000000000001c $d
     /tmp/ccuU3JLM.s:1848   .text.HAL_PWREx_PVM1Callback:0000000000000000 $t
     /tmp/ccuU3JLM.s:1855   .text.HAL_PWREx_PVM1Callback:0000000000000000 HAL_PWREx_PVM1Callback
     /tmp/ccuU3JLM.s:1868   .text.HAL_PWREx_PVM3Callback:0000000000000000 $t
     /tmp/ccuU3JLM.s:1875   .text.HAL_PWREx_PVM3Callback:0000000000000000 HAL_PWREx_PVM3Callback
     /tmp/ccuU3JLM.s:1886   .text.HAL_PWREx_PVM4Callback:0000000000000000 $t
     /tmp/ccuU3JLM.s:1893   .text.HAL_PWREx_PVM4Callback:0000000000000000 HAL_PWREx_PVM4Callback
     /tmp/ccuU3JLM.s:1904   .text.HAL_PWREx_PVD_PVM_IRQHandler:0000000000000000 $t
     /tmp/ccuU3JLM.s:1911   .text.HAL_PWREx_PVD_PVM_IRQHandler:0000000000000000 HAL_PWREx_PVD_PVM_IRQHandler
     /tmp/ccuU3JLM.s:1981   .text.HAL_PWREx_PVD_PVM_IRQHandler:0000000000000040 $d

UNDEFINED SYMBOLS
SystemCoreClock
HAL_PWR_PVDCallback
